{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the GeoBlacklight Documentation pages","text":"<p>GeoBlacklight is an open-source Ruby on Rails software application for discovering geospatial content, including GIS datasets, web services, and digitized paper maps.</p> <p>Tip</p> <p>See an unfamiliar term?  Use the search bar to find its definition in the glossary.</p>"},{"location":"#how-to-use-this-site","title":"How to use this site","text":"<p>Our documentation is split into four themes:</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>These walkthroughs are designed to help new users learn more about GeoBlacklight, how to add metadata to it, and how to customize it.</p>"},{"location":"#how-to-guides","title":"How To Guides","text":"<p>These guides provide real-world instructions for installing, upgrading, and adding customizations.</p>"},{"location":"#reference","title":"Reference","text":"<p>The reference pages include our glossary, the components of configurable application files, and other look up tables.</p>"},{"location":"#explanation","title":"Explanation","text":"<p>The explanation pages include background information and recommendations for running GeoBlacklight in production.</p>"},{"location":"#interested-in-collaborating-on-geoblacklight","title":"Interested in collaborating on GeoBlacklight?","text":"<p>We are actively looking for community input and development partners. View our page on how you can contribute to GeoBlacklight.   </p>"},{"location":"#key-features-of-geoblacklight","title":"Key Features of GeoBlacklight","text":"<ul> <li>Text and spatial search with ranking</li> <li>Facet by institution, year, publisher, data type, access, format</li> <li>Facet by place, subject</li> <li>Results list view with icons, snippets, and map view of bounding boxes</li> <li>Spatial search on map in result list</li> <li>Detail map view for WMS features with feature inspection</li> <li>IIIF scanned map viewer</li> <li>Download the original file (Shapefile, GeoTIFF, GeoJSON, Esri Geodatabase, GeoPackage, or other SQLite database)</li> <li>Download generated Shapefile/GeoTIFF/KML/GeoJSON</li> <li>Built-in sample Solr 8.3+ index</li> <li>Built on top of Blacklight platform</li> <li>Search history</li> <li>Bookmark layers</li> <li>Share link via email</li> <li>Sort by relevance, year, title</li> <li>Customizable skin and facets</li> </ul>"},{"location":"#related-sites","title":"Related sites","text":"<p>GeoBlacklight homepage  OpenGeoMetadata  OpenIndexMaps </p>"},{"location":"adding_leaflet_controls/","title":"Add Leaflet Controls","text":""},{"location":"adding_leaflet_controls/#adding-leaflet-controls","title":"Adding Leaflet controls","text":"<p>GeoBlacklight supports adding customized Leaflet plugin controls to the maps. This can useful for adding a geocoding or fullscreen. This guide will walkthrough adding the Leaflet.fullscreen control plugin.</p>"},{"location":"adding_leaflet_controls/#add-required-javascript-and-css","title":"Add required Javascript and CSS","text":"<p>To add a custom control, first make sure that you require the needed JavaScript and/or CSS styles in your GeoBlacklight application.</p> <pre><code>// In your applications's app/assets/javascripts/geoblacklight.js\n\n//= require geoblacklight/geoblacklight\n//= require geoblacklight/basemaps\n//= require geoblacklight/controls\n//= require geoblacklight/viewers\n//= require geoblacklight/modules\n//= require geoblacklight/downloaders\n//= require leaflet-iiif\n//= require esri-leaflet\n//= require readmore.min\n\n//= require Leaflet.fullscreen.js\n</code></pre> <p>You should do something similar for vendor css files and images. GeoBlacklight uses the Rails asset pipeline for asset management. Vendor maintained files should usually be added under <code>./vendor/assets</code>.</p> <pre><code>// In your applications's app/assets/stylesheets/geoblacklight.css.scss\n/*\n*= require geoblacklight/application\n*= require leaflet.fullscreen\n*/\n</code></pre>"},{"location":"adding_leaflet_controls/#configure-your-settings","title":"Configure your settings","text":"<p>Next, you need to configure your settings to tell the viewers to load your control. Your application's <code>lib/generators/geoblacklight/templates/settings.yml</code> should look something like this:</p> <pre><code>...\nOPACITY_CONTROL: &amp;opacity_control\n  CONTROLS:\n    - 'Opacity'\n\nLEAFLET:\n  MAP:\n  LAYERS:\n  VIEWERS:\n    WMS:\n      &lt;&lt;: *opacity_control\n    TILEDMAPLAYER:\n      &lt;&lt;: *opacity_control\n    FEATURELAYER:\n      &lt;&lt;: *opacity_control\n    DYNAMICMAPLAYER:\n      &lt;&lt;: *opacity_control\n    IMAGEMAPLAYER:\n      &lt;&lt;: *opacity_control\n...\n</code></pre> <p>Let's say you want to add the fullscreen control for just your WMS viewer. You will need to update your <code>WMS</code> viewer controls to add it like so:</p> <pre><code>...\n  VIEWERS:\n      WMS:\n        CONTROLS:\n          - 'Opacity'\n          - 'Fullscreen'\n...\n</code></pre>"},{"location":"adding_leaflet_controls/#initialize-your-plugin","title":"Initialize your plugin","text":"<p>Finally you need to initialize your controls like this. You can initialize the plugin with additional options.</p> <pre><code>// In your applications's app/assets/javascripts/geoblacklight/geoblacklight.js\n...\n//= require Leaflet.fullscreen.js\n\nGeoBlacklight.Controls.Fullscreen = function() {\n  this.map.addControl(new L.Control.Fullscreen({\n    position: 'topright'\n  }));\n};\n</code></pre> <p>You should now have a working fullscreen button in your application!</p> <p></p>"},{"location":"adding_leaflet_controls/#adding-a-search-control","title":"Adding a Search Control","text":"<p>Customizing Leaflet has certain limitations which can fortunately be overcome through the usage of plugins developed by third parties.  Leaflet provides the following listing of plugins for the library: https://leafletjs.com/plugins.html#search--popups</p>"},{"location":"adding_leaflet_controls/#downloading-leaflet-plugins","title":"Downloading Leaflet Plugins","text":"<p>Firstly, in order to integrate a plugin, the JavaScript source file(s) are downloaded into the <code>vendor/assets/javascripts</code> directory, where names are all in the lower case, with whitespace being replaced by dash characters (e. g. <code>vendor/assets/javascripts/esri-leaflet.js</code>)</p>"},{"location":"adding_leaflet_controls/#downloading-javascript-source-files","title":"Downloading JavaScript Source Files","text":"<p>Using <code>wget</code> <pre><code>$ wget -O vendor/assets/javascripts/leaflet-search.js https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.src.js\n</code></pre> Using <code>curl</code> <pre><code>$ curl -o vendor/assets/javascripts/leaflet-search.js https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.src.js\n</code></pre> For Production Builds <pre><code>$ wget -O vendor/assets/javascripts/leaflet-search.js https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.min.js\n</code></pre> or <pre><code>$ curl -o vendor/assets/javascripts/leaflet-search.js https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.min.js\n</code></pre></p>"},{"location":"adding_leaflet_controls/#downloading-css-files","title":"Downloading CSS Files","text":"<p><code>wget</code> <pre><code>$ wget -O vendor/assets/stylesheets/leaflet-search.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.src.css\n\n$ wget -O vendor/assets/stylesheets/leaflet-search.mobile.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.mobile.src.css\n</code></pre> <code>curl</code> <pre><code>$ curl -o vendor/assets/stylesheets/leaflet-search.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.src.css\n\n$ curl -o vendor/assets/stylesheets/leaflet-search.mobile.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.mobile.src.css\n</code></pre> Production Builds <pre><code>$ wget -O vendor/assets/stylesheets/leaflet-search.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.min.css\n\n$ wget -O vendor/assets/stylesheets/leaflet-search.mobile.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.mobile.min.css\n</code></pre> or <pre><code>$ curl -o vendor/assets/stylesheets/leaflet-search.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.min.css\n\n$ curl -o vendor/assets/stylesheets/leaflet-search.mobile.css https://raw.githubusercontent.com/stefanocudini/leaflet-search/master/dist/leaflet-search.mobile.min.css\n</code></pre></p>"},{"location":"adding_leaflet_controls/#downloading-image-files","title":"Downloading Image Files","text":"<p><pre><code>$ wget -O app/assets/images/loader.gif https://github.com/stefanocudini/leaflet-search/raw/master/images/loader.gif\n$ wget -O app/assets/images/search-icon-mobile.png https://github.com/stefanocudini/leaflet-search/raw/master/images/search-icon-mobile.png\n$ wget -O app/assets/images/search-icon.png https://github.com/stefanocudini/leaflet-search/raw/master/images/search-icon.png\n</code></pre> or <pre><code>$ curl -o app/assets/images/loader.gif https://github.com/stefanocudini/leaflet-search/raw/master/images/loader.gif\n$ curl -o app/assets/images/search-icon-mobile.png https://github.com/stefanocudini/leaflet-search/raw/master/images/search-icon-mobile.png\n$ curl -o app/assets/images/search-icon.png https://github.com/stefanocudini/leaflet-search/raw/master/images/search-icon.png\n</code></pre></p>"},{"location":"adding_leaflet_controls/#integrating-plugins-into-leaflet","title":"Integrating Plugins into Leaflet","text":"<p>Integrating a plugin varies depending upon precisely what is being used, but the general approach seems to often follow a pattern such as the following: <pre><code>var searchLayer = L.layerGroup().addTo(map);\n//... adding data in searchLayer ...\nmap.addControl( new L.Control.Search({layer: searchLayer}) );\n</code></pre> ...where the <code>map</code> Object invokes <code>addControl</code> using the search <code>L.Control</code> Object as an argument.</p>"},{"location":"adding_leaflet_controls/#configuring-geoblacklight","title":"Configuring GeoBlacklight","text":"<p>When integrating this GeoBlacklight, the approach above could modified by extending the previous example:</p> <pre><code>...\n  VIEWERS:\n      WMS:\n        CONTROLS:\n          - 'Opacity'\n          - 'Fullscreen'\n          - 'Search'\n...\n</code></pre> <pre><code>// In the application app/assets/javascripts/geoblacklight.js\n...\n//= require\n//= require leaflet-search\n\nGeoBlacklight.Controls.Search = function() {\n  this.map.addControl(new L.control.search({\n    url: 'http://nominatim.openstreetmap.org/search?format=json&amp;q={s}',\n        jsonpParam: 'json_callback',\n        propertyName: 'display_name',\n        propertyLoc: ['lat','lon'],\n        marker: L.circleMarker([0,0], { radius: 30 }),\n        autoCollapse: true,\n        autoType: false,\n        minLength: 2\n  }));\n};\n</code></pre> <p><pre><code>// In the application app/assets/stylesheets/geoblacklight.scss\n/*\n*= require geoblacklight/application\n*= require leaflet-label\n*= require leaflet-search\n*= require leaflet-search.mobile\n*/\n\n// SCSS overrides for the default styles properties\n.leaflet-container {\n  .leaflet-control-search {\n    margin-top: 3.2rem;\n\n    .search-button {\n      background-image: image-url('search-icon-mobile');\n\n      &amp;:hover {\n        background-image: image-url('search-icon-mobile');\n      }\n    }\n  }\n}\n</code></pre> After refreshing your web browser, the map viewer should now have a search control integrated:</p> <p></p>"},{"location":"adding_mirador_viewer/","title":"Add Mirador IIIF Manifest Viewer","text":""},{"location":"adding_mirador_viewer/#what-is-mirador","title":"What is Mirador?","text":"<p>Mirador is an open source IIIF image and IIIF manifest viewer. Core GeoBlacklight contributors have contributed significantly to Mirador. Learn more on the Project Mirador website.</p>"},{"location":"adding_mirador_viewer/#install","title":"Install","text":"<p>Add the Mirador 3 javascript and stylesheet assets to your project. If you are using Yarn, you can just add mirador via:</p> <pre><code>yarn add mirador\n</code></pre> <p>Or you can edit your package.json file like so, and run:</p> <pre><code>  ...\n  \"dependencies\": {\n    \"@babel/cli\": \"^7.5.5\",\n    \"@babel/core\": \"^7.5.5\",\n    \"@rails/webpacker\": \"^4.0.7\",\n    \"babel-loader\": \"^8.0.6\",\n    \"bloodhound-js\": \"^1.2.3\",\n    \"bootstrap\": \"^4.3.1\",\n    \"jquery\": \"^3.4.0\",\n    \"mirador\": \"^3.3.0\",\n    \"readmore-js\": \"^3.0.0-beta-1\",\n    \"typeahead.js\": \"^0.11.1\",\n    \"lodash\": \"^4.17.13\",\n    \"lodash.template\": \"^4.5.0\"\n  }\n</code></pre> <pre><code>yarn install\n</code></pre>"},{"location":"adding_mirador_viewer/#configure","title":"Configure","text":"<p>With Mirador installed, you need to add the javascript library to your application.</p> <p>application.js <pre><code>// Mirador\n//= require mirador/dist/mirador.min.js\n</code></pre></p>"},{"location":"adding_mirador_viewer/#add-a-geoblacklight-viewer","title":"Add a GeoBlacklight Viewer","text":"<p>Within app/assets/javascripts/geoblacklight/viewers add a new iiif_manifest.js viewer, and specify your Mirador configuration values.</p> <pre><code>//= require geoblacklight/viewers/viewer\n\nGeoBlacklight.Viewer.IiifManifest = GeoBlacklight.Viewer.extend({\n  load: function() {\n    var manifest_uri = document.getElementById('map').getAttribute('data-url');\n\n    var miradorInstance = Mirador.viewer({\n       id: 'map',\n       themes: {\n         light: {\n           palette: {\n             type: 'light',\n             primary: {\n               main: '#0088ce',\n             },\n           },\n         },\n       },\n       windows: [{\n         manifestId: manifest_uri,\n         thumbnailNavigationPosition: 'far-bottom',\n       }],\n       window: {\n         hideSearchPanel: false,\n         hideWindowTitle: true,\n         hideAnnotationsPanel: true,\n         allowClose: false,\n         allowMaximize: false,\n         allowFullscreen: true,\n       },\n       workspace: {\n         showZoomControls: true,\n       },\n       workspaceControlPanel: {\n         enabled: false,\n       }\n     });\n  }\n});\n</code></pre> <p>Override the GeoBlacklight ItemViewer to add support for your iiif_manifest viewer. In the B1G Geoportal we keep our local ItemViewer customizations in config/initializers/item_viewer.rb</p> <pre><code>module Geoblacklight\n  class ItemViewer\n    def initialize(references)\n      @references = references\n    end\n\n    def viewer_protocol\n      return 'map' if viewer_preference.nil?\n      viewer_preference.keys.first.to_s\n    end\n\n    def viewer_endpoint\n      return '' if viewer_preference.nil?\n      viewer_preference.values.first.to_s\n    end\n\n    def wms\n      @references.wms\n    end\n\n    def iiif\n      @references.iiif\n    end\n\n    # HERE - Added viewer\n    def iiif_manifest\n      @references.iiif_manifest\n    end\n\n    def tiled_map_layer\n      @references.tiled_map_layer\n    end\n\n    def dynamic_map_layer\n      @references.dynamic_map_layer\n    end\n\n    def feature_layer\n      @references.feature_layer\n    end\n\n    def image_map_layer\n      @references.image_map_layer\n    end\n\n    def index_map\n      @references.index_map\n    end\n\n    # HERE - also need to specify viewer preference\n    def viewer_preference\n      [index_map, wms, iiif, iiif_manifest, tiled_map_layer, dynamic_map_layer,\n       image_map_layer, feature_layer].compact.map(&amp;:to_hash).first\n    end\n  end\nend\n</code></pre>"},{"location":"adding_mirador_viewer/#enjoy","title":"Enjoy!","text":"<p>Add a IIIF Manifest-based fixture to your spec fixtures and reload the application (rake geoblacklight:server).</p>"},{"location":"adding_svg_icons/","title":"SVG Icons","text":"<p>Warning</p> <p>This page may be out of date</p>"},{"location":"adding_svg_icons/#add-new-svgs-to-geoblacklight-or-your-local-gbl-application","title":"Add new SVGs to GeoBlacklight or your local GBL application:","text":"<ol> <li>Add your new or replacement SVG icon into the <code>/app/assets/images/blacklight</code> directory</li> <li>Add an :en I18n translation entry for the SVG icon in <code>/config/locales/geoblacklight.en.yml</code>, following this pattern:</li> </ol> <pre><code>    ...\n      blacklight:\n        icon:\n          arrow-circle-down: Arrow within a circle, pointing down\n          baruch-cuny: Baruch College\n          berkeley: University of California, Berkeley\n          your-new-icon-filename-without-the-extension: Your new icon description\n</code></pre> <p>Render your new SVG icon using the blacklight_icon helper like so:</p> <pre><code>&lt;%= blacklight_icon('icon-filename') %&gt;\n</code></pre>"},{"location":"adding_svg_icons/#svg-icon-maintenance","title":"SVG Icon Maintenance","text":"<p>The stock GeoBlacklight SVG icons come from institutional partners and Font Awesome. The IcoMoon App was used to generate a working project board of icons.</p> <p>To view the IcoMoon project board:</p> <ol> <li>Visit https://icomoon.io/app/#/select</li> <li>Drag and drop the geoblacklight-icons.json file onto the page</li> </ol> <p>Now you'll see all icons in the project. You can add additional icons, change the default color value, or export to other formats here, ex. PNGs.</p> <p></p>"},{"location":"catalog_controller/","title":"Catalog Controller","text":""},{"location":"catalog_controller/#updating-the-catalog-controller","title":"Updating the Catalog Controller","text":"<p>A number of other configurations you may need to update are handled in your <code>app/controllers/catalog_controller.rb</code> file. This file has plenty of code comments to help you out with the details, so the following is just a brief summary of the main configurations you can make within it.</p> <p>Configurations you can alter include:</p> <ul> <li>Search Facet Management<ul> <li>Determine which fields are exposed to users in the search facet panel, and how they are labeled.</li> </ul> </li> <li>Search Results Fields<ul> <li>Determine which fields will be displayed for each item in the search results list.</li> </ul> </li> <li>Item View Fields<ul> <li>Show/hide fields from the catalog view for each item. Note that a number of default fields are not displayed directly in the catalog view because they are used to power different aspects of the presentation.</li> </ul> </li> <li>Default Search Behavior<ul> <li>Alter search ranking, sorting, and filtering.</li> </ul> </li> <li>Basemap Style<ul> <li>See Switching the default basemap</li> </ul> </li> </ul>"},{"location":"contributing/","title":"Contributing to GeoBlacklight","text":"<p>GeoBlacklight is a collaborative open source project and contributions are welcome. This contributing guide is borrowed in part from the Samvera Contributing Guide and the Blacklight Contributing Wiki.</p>"},{"location":"contributing/#who-can-contribute","title":"Who can contribute?","text":"<p>Anyone is welcome to contribute to GeoBlacklight. We follow a set of contribution practices to maintain a technically sustainable and stable software project for everyone.</p>"},{"location":"contributing/#reporting-issues","title":"Reporting issues","text":"<p>Did you find a bug in GeoBlacklight or interested in a new feature? Report it by creating an issue on our GitHub Issue Tracker.</p> <ul> <li>You will need to have a GitHub account</li> <li>For bugs, please include the following information:<ul> <li>Provide a descriptive summary</li> <li>Explain the expected behavior</li> <li>Explain the actual behavior</li> <li>Provide steps to reproduce the actual behavior</li> </ul> </li> </ul>"},{"location":"contributing/#geoblacklight-software-versioning","title":"GeoBlacklight Software Versioning","text":"<p>GeoBlacklight follows the practice of Semantic Versioning for software releases. The declared semantically versioned public API includes:</p> <ul> <li>the public GeoBlacklight Ruby codebase classes</li> <li>the GeoBlacklight JavaScript interface</li> <li>the GeoBlacklight view interface</li> </ul>"},{"location":"contributing/#contributing-code-or-documentation","title":"Contributing code or documentation","text":"<p>GeoBlacklight welcomes code and documentation contributions from anyone. We follow the pull request model for contributing on GitHub. GeoBlacklight uses a suite of tests to express its features and protect from bugs.</p> <p>When proposing major new features that may introduce a breaking change, please make sure to communicate with the community so the full implications can be evaluated. Others may be able to help make these changes backwards-compatible with existing versions.</p>"},{"location":"contributing/#pull-request-overview","title":"Pull request overview","text":"<ol> <li>Fork it ( http://github.com/my-github-username/geoblacklight/fork )</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create new Pull Request</li> </ol>"},{"location":"contributing/#merging-changes","title":"Merging Changes","text":"<ul> <li>Committers are discouraged from merging their own pull requests.</li> <li>Please take the time to review the changes and get a sense of what is being changed. Things to consider:</li> <li>Does the commit message explain what is going on?</li> <li>Does the code changes have tests? Not all changes need new tests, some changes are refactorings</li> <li>Do all new methods, modules, and classes have comments? Do changed methods, modules, and classes have comments?</li> <li>Does the commit contain more than it should? Are two separate concerns being addressed in one commit?</li> <li>Did the Travis tests complete successfully?</li> <li>If you are uncertain, bring other contributors into the conversation by creating a comment that includes their @username.</li> <li>If you like the pull request, but want others to chime in, create a +1 comment and tag a user.</li> </ul> <p>If you wish to ask questions or participate further, email the GeoBlacklight Working Group at geoblacklight-working-group@googlegroups.com.</p>"},{"location":"data_relations_widget/","title":"Data Relations Widget","text":"<p>Warning</p> <p>This documentation is for GeoBlacklight versions 1.3 to versions 3.x only. Beginning with version 4.0, GeoBlacklight performs this function by default.</p> <p>Beginning with v1.3.0, GeoBlacklight supports simple visualization of parent/children relations between records in a catalog. When records that were derived from a parent record point back to that parent, it enables a toolbar widget that displays the relation.</p> <p>To make use of this, we have introduced support for a \"source\" field in GeoBlacklight metadata records. The actual key of this field is arbitrary \u2013\u2013\u00a0just make sure that <code>Settings.FIELDS.SOURCE</code> properly reflects what you want to use \u2013\u2013\u00a0but the GeoBlacklight schema allocates the Dublin Core field <code>dc_source_sm</code> for this purpose.</p> <p>The responsibility of this field is to point to a parent document (a document from which the current one is derived). The value should be the <code>layer_slug_s</code> of that parent (or parents), which also resides in your catalog. No modifications need to be made to the parent record in order to point back towards the derived records.</p> <p>Here is an example use of the <code>dc_source_sm</code> field, from a GeoBlacklight schema record: <pre><code>  \"dc_source_sm\": [\n    \"nyu_2451_34635\",\n    \"nyu_2451_34636\"\n  ],\n</code></pre> In the above case, the record being described is derived from two different records in the catalog (namely, <code>nyu_2451_34635</code> and <code>nyu_2451_34636</code>).</p> <p>Now, when navigating to the show page for either the current record, or one of the two parent records, a user will see something like this:</p> <p> </p> <p>This functionality also provides a HTML and JSON API for viewing all parent/child datasets for a record. The route used is: <code>localhost:3000/catalog/fake-record-001/relations</code></p> <p>A sample JSON response for a record with two parents and no children might look like this: <pre><code>{\n  \"ancestors\": {\n    \"numFound\": 2,\n    \"start\": 0,\n    \"docs\": [\n      {\n        \"dc_title_s\": \"2016 NYC Geodatabase, ArcGIS Version (jan2016)\",\n        \"layer_slug_s\": \"nyu_2451_34636\"\n      },\n      {\n        \"dc_title_s\": \"2016 NYC Geodatabase, Open Source Version (jan2016)\",\n        \"layer_slug_s\": \"nyu_2451_34635\"\n      }\n    ]\n  },\n  \"descendants\": {\n    \"numFound\": 0,\n    \"start\": 0,\n    \"docs\": []\n  },\n  \"current_doc\": \"nyu_2451_34513\"\n}\n</code></pre></p>"},{"location":"default_basemap/","title":"Switch Default Basemap","text":""},{"location":"default_basemap/#switching-the-default-basemap","title":"Switching the default basemap","text":"<p>GeoBlacklight comes with a default open-source basemap, Carto's Positron, but it is possible to switch to one of the seven baselayers supported within the GeoBlacklight application. They are:</p> <ul> <li>Dark Matter</li> <li>Positron</li> <li>Positron Lite</li> <li>World Antique</li> <li>World Eco</li> <li>Flat Blue</li> <li>Midnight Commander</li> </ul> <p>In order to toggle between them, all you need to do is go to the catalog_controller.rb file in your application and replace the config.basemap_provider value. The valid values are in the comments above this line as a helpful reminder.</p>"},{"location":"dynamic_basemap_switching/","title":"Dynamic Basemap Switching","text":"<p>Warning</p> <p>This kind of customization may potentially make your future GeoBlacklight upgrades more difficult. If you choose to implement this feature, you will need to be extra vigilant when GBL JavaScript files change in future releases.</p> <p>Need a dynamic basemap switcher? You can customize GeoBlacklight to add support for Leaflet's basemap switching:</p> <p></p>"},{"location":"dynamic_basemap_switching/#1-add-javascript-cookie-to-your-application","title":"1. Add JavaScript Cookie to your application","text":"<p>Use yarn to install js-cookie:</p> <pre><code>$ yarn add js-cookie\n</code></pre> <p>Add the node_modules directory to your asset path:</p> <p><code>/config/initializers/assets.rb</code></p> <pre><code>Rails.application.config.assets.paths &lt;&lt; Rails.root.join('node_modules')\n</code></pre> <p>Add js-cookie to your geoblacklight.js file:</p> <p><code>/app/assets/javascript/geoblacklight.js</code></p> <pre><code>//= require handlebars.runtime\n//= require geoblacklight/geoblacklight\n//= require geoblacklight/basemaps\n//= require geoblacklight/controls\n//= require geoblacklight/viewers\n//= require geoblacklight/modules\n//= require geoblacklight/downloaders\n//= require leaflet-iiif\n//= require esri-leaflet\n\n// Local Customizations\n//= require js-cookie/dist/js.cookie.js\n//= require ./local/viewers/map\n</code></pre>"},{"location":"dynamic_basemap_switching/#2-add-basemap-options","title":"2. Add Basemap options","text":"<p>Configure the additional basemap options in your geoblacklight.js file:</p> <p><code>/app/assets/javascript/geoblacklight.js</code></p> <pre><code>...\n\n// Local Customizations\n//= require js-cookie/dist/js.cookie.js\n//= require ./local/viewers/map\n\n// LOCAL Namespace\nif (!window.LOCAL){ LOCAL={}; }\n\n// Basemap select - Text: Value\nLOCAL.baseLayerMap = {\n  \"Default (Esri)\": 'esri',\n  \"OpenStreetMaps\": 'openstreetmapStandard',\n  \"World Imagery (Esri)\": 'esri_world_imagery'\n}\n\n// Additional leaflet base layers\nGeoBlacklight.Basemaps.esri =  L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {\n  attribution: false,\n  maxZoom: 18,\n  worldCopyJump: true,\n  detectRetina: true,\n  noWrap: false\n});\n\nGeoBlacklight.Basemaps.esri_world_imagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n  attribution: false,\n  maxZoom: 18,\n  worldCopyJump: true,\n  detectRetina: true,\n  noWrap: false\n})\n</code></pre>"},{"location":"dynamic_basemap_switching/#3-modify-geoblacklights-mapjs-file","title":"3. Modify GeoBlacklight's map.js file","text":"<p>Copy and move GeoBlacklight's <code>map.js</code> file to your local application.</p> <p>Copy from GeoBlacklight: <code>app/assets/javascripts/geoblacklight/viewers/map.js</code></p> <p>Move to your local application here: <code>app/assets/javascripts/local/viewers/map.js</code></p> <p>Add a call to this.addBasemapSwitcher(); in the load block.</p> <pre><code>//= require geoblacklight/viewers/viewer\n\nGeoBlacklight.Viewer.Map = GeoBlacklight.Viewer.extend({\n\n  options: {\n    /**\n    * Initial bounds of map\n    * @type {L.LatLngBounds}\n    */\n    bbox: [[-82, -144], [77, 161]],\n    opacity: 0.75\n  },\n\n  overlay: L.layerGroup(),\n\n  load: function() {\n    if (this.data.mapGeom) {\n      this.options.bbox = L.geoJSONToBounds(this.data.mapGeom);\n    }\n    this.map = L.map(this.element).fitBounds(this.options.bbox);\n    this.map.addLayer(this.selectBasemap());\n\n    // Add initial bbox to map element for easier testing\n    if (this.map.getBounds().isValid()) {\n      this.element.setAttribute('data-js-map-render-bbox', this.map.getBounds().toBBoxString());\n    }\n\n    this.map.addLayer(this.overlay);\n    if (this.data.map !== 'index') {\n      this.addBoundsOverlay(this.options.bbox);\n    }\n\n    // Local Customizations\n    this.addBasemapSwitcher();\n  },\n\n  ...\n</code></pre> <p>Now add the functions to switch basemaps and store the current basemap in JS Cookie:</p> <pre><code>...\n\n/**\n* Selects basemap if specified in 1) cookie, 2) data options, 3) if not return mapquest\n*/\nselectBasemap: function() {\n  console.log(\"Selecting basemap\");\n  console.log(\"Cookie: \" + Cookies.get('basemap'));\n\n  var _this = this;\n  if (Cookies.get('basemap')) {\n    return GeoBlacklight.Basemaps[LOCAL.baseLayerMap[Cookies.get('basemap')]];\n  } else if (_this.data.basemap) {\n    return GeoBlacklight.Basemaps[_this.data.basemap];\n  } else {\n    return _this.basemap.mapquest;\n  }\n},\n\naddBasemapSwitcher: function() {\n  // basemaps control\n  console.log('Control: Base Layer');\n  var baseLayers = {\n    \"Default (Esri)\": GeoBlacklight.Basemaps.esri,\n    \"OpenStreetMaps\": GeoBlacklight.Basemaps.openstreetmapStandard,\n    \"World Imagery (Esri)\": GeoBlacklight.Basemaps.esri_world_imagery\n  };\n\n  L.control.layers(baseLayers, null, { position: 'bottomleft' }).addTo(this.map);\n\n  // Event listener for layer switcher\n  this.map.on('baselayerchange', function (e) {\n    Cookies.set('basemap', e.name)\n  });\n}\n\n...\n</code></pre>"},{"location":"dynamic_basemap_switching/#4-add-leaflets-css-file-to-the-asset-pipeline","title":"4. Add Leaflet's CSS file to the asset pipeline","text":"<p>Unfortunately, Rails' asset pipeline cannot find Leaflet's Layer Group icon/images without some additional help.</p> <p>Download a copy of Leaflet and copy the leaflet.css file into your local project here:</p> <p><code>app/assets/stylesheets/leaflet/leaflet.css.erb</code></p> <p>Add an import statement to <code>application.scss</code> for this new file:</p> <pre><code>...\n\n// Customizations\n@import 'leaflet/leaflet';\n</code></pre> <p>We'll need to modify this CSS file slightly to reference the images we need in the application.</p> <p>At the top of this file add these lines:</p> <pre><code>//= depend_on_asset 'layer.png'\n//= depend_on_asset 'layers-2x.png'\n</code></pre> <p>Farther down the file, we'll need to edit this block too:</p> <pre><code>...\n\n/* layers control */\n\n.leaflet-control-layers {\n    box-shadow: 0 1px 5px rgba(0,0,0,0.4);\n    background: #fff;\n    border-radius: 5px;\n    }\n.leaflet-control-layers-toggle {\n    background-image: url(&lt;%= asset_url 'layers.png' %&gt;);\n    width: 36px;\n    height: 36px;\n    }\n.leaflet-retina .leaflet-control-layers-toggle {\n    background-image: url(&lt;%= asset_url 'layers-2x.png' %&gt;);\n    background-size: 26px 26px;\n    }\n\n...\n</code></pre> <p>We need the background-image paths to use Rails' asset_url helper so these images are fingerprinted correctly.</p> <p>Lastly, from your Leaflet download copy the <code>layers.png</code> and <code>layers-2x.png</code> files into your local application here:</p> <ul> <li><code>app/assets/images/layers.png</code></li> <li><code>app/assets/images/layers-2x.png</code></li> </ul>"},{"location":"geoblacklight_quick_start/","title":"GeoBlacklight Quick Start","text":"<p>This guide covers the quickest way to get up and running with GeoBlacklight, including:</p> <ul> <li>How to install GeoBlacklight on your local computer.</li> <li>How to create a new application.</li> <li>How to add and index geospatial content.   </li> </ul>"},{"location":"geoblacklight_quick_start/#installation","title":"Installation","text":"<p>Bootstrap a new GeoBlacklight Ruby on Rails application using the template script:</p> <p><pre><code>DISABLE_SPRING=1 rails new app-name -m https://raw.githubusercontent.com/geoblacklight/geoblacklight/main/template.rb\n</code></pre>   Then run the <code>geoblacklight:server</code> rake task to run the application:</p> <pre><code>$ cd app-name\n$ bundle exec rake geoblacklight:server\n</code></pre> <ul> <li>Visit your GeoBlacklight application at: http://localhost:3000</li> <li>Visit the Solr admin panel at: http://localhost:8983/solr/#/blacklight-core</li> </ul>"},{"location":"geoblacklight_quick_start/#index-example-data","title":"Index Example Data","text":"<p>With your Solr server and Rails server already running (via the <code>geoblacklight:server</code> rake task above), open a new terminal window and index the GeoBlacklight project's test fixtures via:</p> <pre><code>$ bundle exec rake \"geoblacklight:index:seed[:remote]\"\n</code></pre>"},{"location":"geopackages/","title":"GeoPackages","text":""},{"location":"geopackages/#accessing-raster-and-vector-layers-in-geopackages","title":"Accessing Raster and Vector Layers in GeoPackages","text":""},{"location":"geopackages/#ogc-geopackage","title":"OGC GeoPackage","text":"<p>GeoPackage is an encoding standard specified and maintained by the Open Geospatial Consortium, primarily directed towards the structure of SQLite geodatabases.  As the GeoPackage standard provides standardization for vector features, tile matrix sets, and raster maps, it may be used as a container for either vector or raster spatial data sets.</p> <p>To indicate the download is a \u201cGeoPackage\u201d, add this term to the <code>dct_format_s</code> OpenGeoMetadata schema field.</p>"},{"location":"geopackages/#gis-web-services","title":"GIS Web Services","text":"<p>GeoPackages may be rendered using the layer viewer by providing the URL of a standard Web Map Service (WMS) or Web Feature Service (WFS) within the <code>dct_references_s</code> field of the schema.</p>"},{"location":"geopackages/#geoserver-support","title":"GeoServer Support","text":"<p>For those who are currently using GeoServer in order to provide access to these data sets, the documentation outlines the process for uploading data sets and extracting vector or raster layers.  Further, there also exists a plugin which permits one to export vector or raster data layers into GeoPackages (please see further documentation outlining the extended WMS/WFS output formats). Unfortunately (as stated above), exporting into GeoPackage in GeoServer requires that one install a plugin.  Only reading is supported by GeoServer core.</p>"},{"location":"geopackages/#arcmap-and-arcgis-pro-support","title":"ArcMap and ArcGIS Pro Support","text":"<p>For those using Esri's ArcMap, the process of connecting to a GeoPackage data source is identical to that of connecting to any SQLite database: https://desktop.arcgis.com/en/arcmap/latest/manage-data/databases/connect-sqlite.htm.  This is the case also for users of ArcGIS Pro: https://pro.arcgis.com/en/pro-app/help/data/databases/work-with-sqlite-databases-in-arcgis-pro.htm </p>"},{"location":"getting_started_developers/","title":"Getting Started for Developers","text":"<p>This guide covers: </p> <ol> <li>How to install a local instance of GeoBlacklight for Development purposes.  </li> <li>How to make small changes to the application.  </li> <li>How to see how those changes look in a browser.  </li> </ol>"},{"location":"getting_started_developers/#dependencies","title":"Dependencies","text":"<p>Software you should have installed on your development computer  </p> <ul> <li>Ruby &gt; 3.0.0</li> <li>Git &gt; 2 </li> <li>Java &gt; JRE version 11 or higher</li> </ul>"},{"location":"getting_started_developers/#installation-for-development","title":"Installation for Development","text":"<p>To set up a working space, navigate to where you'd like to put your test GeoBlacklight app and then clone the repository: <pre><code>$ git clone git@github.com:geoblacklight/geoblacklight.git\n</code></pre> Once the files are downloaded, run <pre><code>$ cd geoblacklight\n$ bundle exec rake geoblacklight:server\n</code></pre></p> <p>This command executes everything needed to run a local version of GeoBlacklight. In order to see the version you have running, open a web browser and go to http://localhost:3000/. You should be able to navigate around the site. Remember that your Rails server is running locally, so to stop it, run ^C (ctrl + c).</p> <p>Troubleshooting</p> <p>If you run into issues running this rake task, try removing your <code>Gemfile.lock</code> file and removing the test app with <code>rm -R .internal_test_app</code>. Then run <code>bundle install</code> before running the above command again.</p>"},{"location":"getting_started_developers/#running-solr-and-rails-server-separately","title":"Running Solr and Rails server separately","text":"<p>You may decide to run either the Solr server or Rails server separately. With Solr, for instance, run <pre><code>$ rake geoblacklight:solr\n</code></pre> Then, open another Terminal window, navigate to the place where your app is located, and run: <pre><code>$ rake engine_cart:server\n</code></pre> Once the server is running, you can open a web browser and visit the URL it prompts, usually http://localhost:8983/solr/#/blacklight-core to see the admin interface of your test instance of Solr. As before, remember that ^C (ctrl + c) stops the server.</p>"},{"location":"getting_started_developers/#using-an-external-solr-instance","title":"Using an External SOLR Instance","text":"<p>In some cases you may need to install SOLR through a different method than described above, or link your GeoBlacklight installation to an existing SOLR installation. You can learn more about installing SOLR in the Apache documentation.</p>"},{"location":"getting_started_developers/#configure-the-solr-core","title":"Configure the SOLR Core","text":"<p>Once you have SOLR installed, you will need to create a new core and configure it for GeoBlacklight. How you create the core may depend on your installation method, but will likely be something like</p> <pre><code>$ bin/solr -c blacklight-core\n</code></pre> <p>Now rename/remove the core's <code>conf</code> directory and replace it with the <code>solr/conf</code> directory from GeoBlacklight: [github.com/geoblacklight/geoblacklight/tree/main/solr/conf](https://github.com/geoblacklight/geoblacklight/tree/main/solr/conf.</p> <p>You can alter the core's configuration here as well, generally in the <code>schema.xml</code> file.</p> <p>You can find the installation location of your SOLR instance through the web admin interface: http://yourdomain.com:8983/solr/</p>"},{"location":"getting_started_developers/#set-solr_url-environment-variable","title":"Set <code>SOLR_URL</code> Environment Variable","text":"<p>GeoBlacklight will use the <code>SOLR_URL</code> environment variable (if present) to look for SOLR. For example, assuming your core is named <code>blacklight-core</code>:</p> <pre><code>$ export SOLR_URL=http://yourdomain.com:8983/solr/blacklight-core\n</code></pre> <p>Now run the rails server and your external SOLR will be used</p> <pre><code>$ rake engine_cart:server\n</code></pre>"},{"location":"getting_started_developers/#unit-testing","title":"Unit Testing","text":""},{"location":"getting_started_developers/#running-all-the-tests","title":"Running all the tests","text":"<p>As you develop and make changes, you may want to run tests on parts of the app to see if any warning occur. You can run the following to test the app <pre><code>$ rake ci\n</code></pre> Note that a test like this could take up to 5-6 minutes to complete, or longer. Warnings, deprecations, and other messages will be printed on your Terminal screen.</p>"},{"location":"getting_started_developers/#running-the-tests-separately","title":"Running the tests separately","text":"<p><pre><code>$ rake geoblacklight:solr\n</code></pre> Then, in another terminal window: <pre><code>$ rspec spec/\n</code></pre> Note: It is not necessary to run tests after every change you make. You can, for instance, change the name of a facet field, save your file, and then refresh your browser to see the change. However, if you add a new fixture metadata record, you will have to stop the servers and then restart them so the new file will be indexed.</p>"},{"location":"getting_started_developers/#browser-testing","title":"Browser Testing","text":"<p>Cross-browser testing provided by:</p> <p></p>"},{"location":"getting_started_developers/#helpful-development-tools","title":"Helpful Development Tools","text":""},{"location":"getting_started_developers/#version-managers","title":"Version Managers","text":"<p>Using version management tools for compatible versions of Ruby (rvm, rbenv, asdf) and Node (nvm, asdf) can make development easier.</p>"},{"location":"getting_started_developers/#asdf","title":"asdf","text":"<p>Many developers like asdf because you can manage versions for Ruby and Node in a single utility. For developers who use asdf, it is helpful to add a <code>.tool-versions</code> file for each app.</p> <p>Example: <pre><code>ruby 2.7.5\nnodejs 17.4.0\njava openjdk-11.0.2\n</code></pre></p>"},{"location":"glossary/","title":"Glossary","text":"<p>Tip</p> <p>See the Geo4LibCamp Glossary for more definitions at https://geo4libcamp.org/glossary</p>"},{"location":"glossary/#aardvark","title":"Aardvark","text":"Metadata schema for GeoBlacklight 4.x and beyond"},{"location":"glossary/#gbl-10","title":"GBL 1.0","text":"Metadata schema for GeoBlacklight 1.0-3.x"},{"location":"glossary/#geojson","title":"GeoJSON","text":"Specific type of JSON for geographic features, such as OpenIndexMaps. GeoBlacklight metadata files are NOT GeoJSONs."},{"location":"glossary/#faraday","title":"Faraday","text":"A type of middleware for Ruby on Rails that provides a common interface, enabling different applications to send and receive data"},{"location":"glossary/#iiif","title":"IIIF","text":"International Image Interoperability Framework. Used for displaying static images, like scanned maps."},{"location":"glossary/#json","title":"JSON","text":"JavaScript Object Notation - a flexible key:value pair file format used for GeoBlacklight metadata documents"},{"location":"glossary/#mirador","title":"Mirador","text":"Open-Source IIIF viewer"},{"location":"glossary/#ogm","title":"OGM","text":"OpenGeoMetadata"},{"location":"glossary/#openindexmaps","title":"OpenIndexMaps","text":"GeoJSON-based file specification for standardizing spatial index maps"},{"location":"glossary/#solr","title":"Solr","text":"The search index for GeoBlacklight"},{"location":"glossary/#sprockets","title":"Sprockets","text":"Ruby library for compiling and serving web assets"},{"location":"hardware_recommendations/","title":"Hardware Recommendations","text":"<p>Running GeoBlacklight in production has modest hardware requirements. Your local IT system administrators and DevOps personnel will be critical in shaping your deployment environment.</p>"},{"location":"hardware_recommendations/#example-production-environments","title":"Example Production Environments","text":""},{"location":"hardware_recommendations/#b1gbtaa-geoportal","title":"B1G/BTAA Geoportal","text":"<p>Currently (9/2022) the B1G/BTAA Geoportal is running on AWS web services in production with these hardware specs:</p>"},{"location":"hardware_recommendations/#solr-server","title":"Solr server","text":"<ul> <li>4GB RAM</li> <li>2 CPU cores</li> <li>Java Xmx configured for 3GB memory</li> <li>OS base disk: small, at least 8GB for Linux but not much more needed</li> <li>Solr data partition: 40GB (in practice, &lt;10GB in use for BTAA)</li> </ul>"},{"location":"hardware_recommendations/#webrails-server","title":"Web/Rails server","text":"<ul> <li>8GB RAM</li> <li>2 CPU cores</li> <li>OS base disk: at least 20GB for Linux</li> <li>Data partition: 60GB for ample thumbnail caching space</li> <li>Puma Rails server: Recommend 2 workers, 8 threads per worker in this configuration. More threads will necessitate more system memory</li> </ul>"},{"location":"homepage_map_centroid_clusters/","title":"Homepage Map Centroid Clusters","text":"<p>Warning</p> <p>This kind of customization may potentially make your future GeoBlacklight upgrades more difficult. If you choose to implement this feature, you will need to be extra vigilant when GBL JavaScript files change in future releases.</p> <p>Want your homepage map to display centroid clusters? You can customize GeoBlacklight to add support for that:</p> <p></p>"},{"location":"homepage_map_centroid_clusters/#1-add-a-rake-task-to-generate-a-centroidsjson-file","title":"1. Add a rake task to generate a centroids.json file","text":"<p>Create a new rake file here: <code>/lib/tasks/generate_centroids_json.rake</code></p> <p>This rake task will write a <code>centroids.json</code> file to your application's public directory. Add these lines to the file:</p> <pre><code>require 'rsolr'\n\nnamespace :geoportal do\n  desc 'Generate homepage centroids for map clustering'\n  task generate_centroids_json: :environment do\n    response = Blacklight.default_index.connection.get 'select', params: { q: \"*:*\", rows: '1000000' }\n\n    docs = []\n    response[\"response\"][\"docs\"].each_with_index do |doc, index|\n      begin\n        if doc.key?('dcat_centroid') &amp;&amp; !doc['dcat_centroid'].empty?\n          entry = {}\n          entry['l'] = doc['id']\n          entry['t'] = ActionController::Base.helpers.truncate(doc['dct_title_s'], length: 50)\n          lat,lng    = doc['dcat_centroid'].split(\",\")\n          lat = lat.to_f.round(4) # Truncate long values\n          lng = lng.to_f.round(4) # Truncate long values\n          entry['c'] = \"#{lat},#{lng}\"\n          docs &lt;&lt; entry\n        end\n      rescue Exception =&gt; e\n        puts \"Caught #{e}\"\n        puts \"BBox or centroid no good - #{doc['id']}\"\n      end\n    end\n\n    centroids_file = \"#{Rails.root}/public/centroids.json\"\n    File.open(centroids_file, \"w\"){ |f| f.write(JSON.generate(docs)) }\n  end\nend\n</code></pre> <p>Run this rake task via this command: <code>bundle exec rake geoportal:generate_centroids_json</code></p>"},{"location":"homepage_map_centroid_clusters/#2-install-javascript-dependencies","title":"2. Install JavaScript Dependencies","text":"<ul> <li>Oboe - Oboe.js reads json, giving you the objects as they are found without waiting for the stream to finish</li> <li>PruneCluster - Fast and realtime marker clustering for Leaflet</li> </ul> <p>Use yarn to add these two new dependencies to the project:</p> <p><code>yarn add oboe</code> <code>yarn add @sintef/prune-cluster</code></p> <p>Add the node_modules directory to your asset path:</p> <p><code>/config/initializers/assets.rb</code></p> <pre><code>Rails.application.config.assets.paths &lt;&lt; Rails.root.join('node_modules')\n</code></pre>"},{"location":"homepage_map_centroid_clusters/#3-add-our-javascript-changes-for-the-homepage-map","title":"3. Add our JavaScript changes for the Homepage Map","text":"<p>We need to override the GeoBlacklight <code>app/assets/javascripts/geoblacklight/modules/home.js</code> file to add our customization.</p> <p>To override a Rails Engine's javascript (GeoBlacklight), we need to update our asset pipeline calls to require specific files from the GeoBlacklight modules directory instead of globbing all of the file from <code>/modules/</code>.</p> <p>Change your local <code>geoblacklight.js</code> file to look like this:</p> <pre><code>//= require handlebars.runtime\n//= require geoblacklight/geoblacklight\n//= require geoblacklight/basemaps\n//= require geoblacklight/controls\n//= require geoblacklight/viewers\n\n// Local Customization - Start\n//= require geoblacklight/modules/bookmarks\n//= require geoblacklight/modules/download\n//= require geoblacklight/modules/geosearch\n//= require geoblacklight/modules/help_text\n//= require ./geoportal/modules/home\n//= require geoblacklight/modules/item\n//= require geoblacklight/modules/layer_opacity\n//= require geoblacklight/modules/metadata_download_button\n//= require geoblacklight/modules/metadata\n//= require geoblacklight/modules/relations\n//= require geoblacklight/modules/results\n//= require geoblacklight/modules/svg_tooltips\n//= require geoblacklight/modules/util\n// Local Customization - End\n\n//= require geoblacklight/downloaders\n//= require leaflet-iiif\n//= require esri-leaflet\n</code></pre> <p>As included in the code snippet above, add a file named <code>app/assets/javascripts/geoportal/modules/home.js</code> to your application.</p> <p>Inside that file write these lines:</p> <pre><code>Blacklight.onLoad(function() {\n  $('[data-map=\"home\"]').each(function(i, element) {\n    var geoblacklight = new GeoBlacklight.Viewer.Map(this);\n    var data = $(this).data();\n\n    geoblacklight.map.addControl(L.control.geosearch({\n      baseUrl: data.catalogPath,\n      dynamic: false,\n      searcher: function() {\n        window.location.href = this.getSearchUrl();\n      },\n      staticButton: '&lt;a href=\"#\" class=\"btn btn-primary\"&gt;Search here&lt;/a&gt;'\n    }));\n\n    // Local Customization - Start\n    var pruneCluster = new PruneClusterForLeaflet();\n\n    oboe('/centroids.json')\n      .node('*', function( doc ){\n          if(typeof doc.c != 'undefined'){\n            var latlng = doc.c.split(\",\")\n\n            var marker = new PruneCluster.Marker(latlng[0],latlng[1], {popup: \"&lt;a href='/catalog/\" + doc.l + \"'&gt;\" + doc.t + \"&lt;/a&gt;\"});\n            pruneCluster.RegisterMarker(marker);\n          }\n        }\n      )\n      .done(function(){\n        geoblacklight.map.addLayer(pruneCluster)\n      });\n    // Local Customization - End\n  });\n});\n</code></pre>"},{"location":"homepage_map_centroid_clusters/#4-add-our-stylesheet-changes-for-the-homepage-map","title":"4. Add our Stylesheet changes for the Homepage Map","text":"<p>All that is missing now are is the CSS changes to style our clusters. Update your <code>application.scss</code> file to include the missing stylesheet:</p> <pre><code>@import 'customizations';\n@import 'bootstrap';\n@import 'blacklight';\n@import 'geoblacklight';\n\n// Local Customization\n@import '@sintef/prune-cluster/dist/LeafletStyleSheet';\n</code></pre> <p>Reload your homepage and you should see something like this:</p> <p></p>"},{"location":"implementation_recommendations/","title":"Implementation Recommendations","text":"<p>Adhering to local IT best practices will help your GeoBlacklight install get up and running with optimal support from your IT staff. Below are some discussion points worth discussing locally as you move your GBL application to production:</p>"},{"location":"implementation_recommendations/#analytics","title":"Analytics","text":"<p>You will want to collect web analytics for your application. Some institutions have policies in place to protect the anonymity of web users. Be sure to discuss how analytics will be implemented and monitored.</p>"},{"location":"implementation_recommendations/#sitemap-and-robotstxt","title":"Sitemap and robots.txt","text":"<p>A sitemap and a robots.txt file will help you keep bots from crawling your application in ways that would cause significant performance issues.</p> <p>For example, in the B1G Geoportal, we use the sitemap_generator rubygem and a cronjob to keep a sitemap up to date:</p> <pre><code># config/sitemap.rb\nsolr = RSolr.connect url: Blacklight.connection_config[:url]\n\n# Select all the docs from Solr\nresponse = sol.get('select', params: {q: '*:*', fl: 'id', rows: 9999999})\n\n# Build a flat sorted array of all document slugs\nslugs = response['response']['docs'].map { |doc| doc['id'] }.sort\n\n# Set the host name for URL creation\nSitemapGenerator::Sitemap.default_host = 'https://geo.btaa.org'\nSitemapGenerator::Sitemap.create do\n  # Put links creation logic here.\n  #\n  # The root path '/' and sitemap index file are added automatically for you.\n  # Links are added to the Sitemap in the order they are specified.\n  #\n  # Usage: add(path, options={})\n  #        (default options are used if you don't specify)\n  #\n  # Defaults: :priority =&gt; 0.5, :changefreq =&gt; 'weekly',\n  #           :lastmod =&gt; Time.now, :host =&gt; default_host\n  #\n\n  slugs.each { |slug| add \"/catalog/#{slug}\" }\nend\n</code></pre> <pre><code># whenever gem\nevery :day, at: '12:30am', roles: [:app] do\n  rake 'sitemap:refresh'\nend\n</code></pre> <p>You'll likely want to disallow any code paths that hit Solr with a search query:</p> <pre><code>User-agent: *\nDisallow: /?q=\nDisallow: /*?q=*\nDisallow: /?f\nDisallow: /*?f*\nDisallow: /?_\nDisallow: /?bbox\nDisallow: /?page=\nDisallow: /bookmarks\nDisallow: /catalog.html?f\nDisallow: /catalog.html?_\nDisallow: /catalog.atom\nDisallow: /catalog.rss\nDisallow: /catalog/*/relations\nDisallow: /catalog/facet/*\nDisallow: /catalog/*/web_services\nDisallow: /catalog/email\nDisallow: /catalog/opensearch\nDisallow: /catalog/range_limit\nDisallow: /catalog/sms\nDisallow: /saved_searches\nDisallow: /search_history\nDisallow: /suggest\nDisallow: /users\nDisallow: /404\nDisallow: /422\nDisallow: /500\n</code></pre> <p>You might also want to disallow bots that aggressively index content as well:</p> <pre><code>User-agent: AhrefsBot\nDisallow: /\nUser-agent: SemrushBot\nDisallow: /\nUser-agent: PetalBot\nDisallow: /\nUser-agent: BLEXBot\nDisallow: /\nUser-agent: DotBot\nDisallow: /\nUser-agent: DataForSeoBot\nDisallow: /\n</code></pre>"},{"location":"implementation_recommendations/#uptime-and-performance-monitoring","title":"Uptime and Performance Monitoring","text":"<p>Your local IT staff should implement uptime and performance monitoring for your production GeoBlacklight application.</p> <p>Systemd for process / uptime management and Nagios/Zabbix/CloudWatch for alerting are common tools. Third party options like AppSignal and UptimeRobot can help, too.</p>"},{"location":"implementation_recommendations/#data-backups","title":"Data Backups","text":"<p>Discuss options for automatically backing up your application data from Solr and your application's relational database. Having a backup of your data will help you restore service after an unplanned interruption or corrupted index.</p> <p>See the Apache Solr Reference Guide's Backup and Restore chapter for more details.</p>"},{"location":"implementation_recommendations/#log-rolling","title":"Log Rolling","text":"<p>You will need to schedule your application logs to periodically rotate to maintain the size of these files. The <code>logrotate</code> utility can be very helpful here.</p>"},{"location":"implementation_recommendations/#useful-cron-tasks","title":"Useful Cron Tasks","text":"<p>A few cronjobs will help keep your database lean. These examples use the popular whenever rubygem.</p>"},{"location":"implementation_recommendations/#delete-old-searches","title":"Delete Old Searches","text":"<pre><code># Clean up recent anonymous search records\nevery :day, at: '2:30am', roles: [:app] do\n  rake 'blacklight:delete_old_searches[7]'\nend\n</code></pre>"},{"location":"implementation_recommendations/#delete-old-guest-users","title":"Delete Old Guest Users","text":"<pre><code># Cleans up anonymous user accounts created by search sessions\nevery :day, at: '1:30am', roles: [:app] do\n  rake 'devise_guests:delete_old_guest_users[2]'\nend\n</code></pre>"},{"location":"index_maps/","title":"Index Maps","text":""},{"location":"index_maps/#index-maps-in-geoblacklight","title":"Index Maps in GeoBlacklight","text":""},{"location":"index_maps/#index-maps-introduction","title":"Index Maps: Introduction","text":"<p>The 2020 Geo4LibCamp featured a workshop on index maps that provides useful information if you are new to index maps and want a basic primer. Many of the links below will lead you to relevant parts of this workshop.</p> <p>For a conceptual introduction to index maps (i.e. what are index maps anyway?), see this explanation.</p> <p>Here are examples of \"live\" index maps hosted within the GeoBlacklight instances of Cornell and Stanford.  </p>"},{"location":"index_maps/#making-index-maps","title":"Making Index Maps","text":"<p>Before making index maps for use in GeoBlacklight, it is important to be familiar with OpenIndexMaps, a specific index map standard that is used by the GeoBlacklight community. For an introduction to this standard, see here. For more detailed information on making index maps according to the OpenIndexMaps standard, see here.</p> <p>Index maps that are made according to the OpenIndexMaps standard are encoded in the GeoJSON format. For more information about GeoJSON, see here.  For a longer guide to GeoJSON with additional useful information, please see the Data Curation Network (DCN) primer on GeoJSON.</p> <p>When working with GeoJSON, it is recommended to use QGIS. For a quick overview of QGIS features that are relevant to working with GeoJSON, see here.</p> <p>The following tutorials cover how to make a polygon index map from an existing shapefile, how to make a point index map from a spreadsheet containing coordinates, how to create a grid index map from scratch, and how to create a polygon index map using virtual layer magic.  </p>"},{"location":"index_maps/#adding-customizing-and-displaying-index-maps","title":"Adding, Customizing, and Displaying Index Maps","text":"<p>#588 added index map discovery and preview to GeoBlacklight. Index map preview can be added to a layer by adding an accessible url to a GeoJSON file in a layer's <code>dct_references_s</code> section:</p> <pre><code>\"dct_references_s\": \"{\\\"https://openindexmaps.org\\\": \\\"https://gist.githubusercontent.com/mejackreed/4a44f1f7cc4fbb926068738e903a9e96/raw/fedfb0e599d647920f084627b7dca8f88a358757/stanford-fb897vt9938.geojson\\\"}\",\n</code></pre> <p>As noted above, index maps should be created using the OpenIndexMaps specification. In GeoBlacklight, the <code>label</code> property will be used for the tooltip that appears when the user hovers over a feature on the index map.</p> <p>The index map preview can be customized by overriding the Handlebars template <code>index_map_info.hbs</code> and/or overriding the <code>GeoBlacklight.Util.indexMapTemplate</code> method.</p> <p>#759 added selection styling for GeoJSON index map features and adjusted where style customizations are set. Styling for index map features can be customized in <code>settings.yml</code>. Any style that is set in the <code>DEFAULT</code> section will be applied to all feature states unless overwritten within each specific state. Style options follow the Leaflet Path Options, so any new style added should be from those available.</p>"},{"location":"index_maps/#metadata-for-index-maps","title":"Metadata for Index Maps","text":"<p>Here are some recommendations to keep in mind when generating metadata for index maps:</p> <ul> <li> <p>The Geometry Type/Resource Type field (<code>layer_geom_type_s</code> in Metadata 1.0 or <code>gbl_resourceType_sm</code> in OpenGeoMetadata Aardvark) in the index map's metadata record should reflect the geometry type of the scanned map, aerial photo, LiDAR dataset etc. (i.e. the underlying data for which the index map serves as a contextual guide). It should not indicate the geom type of the index map itself.</p> </li> <li> <p>The Subject field (<code>dc_subject_sm</code> or <code>dct_subject_sm)</code>) in the index map's metadata should include \"index map\" (in addition to other keywords relevant to the underlying data collection).</p> </li> <li> <p>The Source field (<code>dc_source_sm</code> or <code>dct_source_sm</code>) in the metadata records of the underlying data should should reference the index map, since the index map can be seen as a \"source dataset\" that offers a guide to the broader collection.</p> </li> </ul>"},{"location":"index_maps/#committing-geoblacklight-index-maps-to-the-openindexmaps-github-repository","title":"Committing GeoBlacklight Index Maps to the OpenIndexMaps Github repository","text":"<p>Once you have generated your index map and its associated metadata, the index map must go \"live\" on the web. There are different ways to pursue the task of making an index map go \"live\", but the recommended approach is to commit the map/GeoJSON to OpenIndexMaps' Github Repository, which facilitates the discovery and sharing of index maps across institutions.</p> <p>Once your map has been committed to your OpenIndexMaps repository, you will want to take the url for the map's blob (\"blob\" stands for binary large object, which is an object that contains the contents of your file), and add this information back to your GeoBlacklight metadata record (in particular, you'll want to add this information to the <code>dct_references_s</code> section).</p> <p>To get the blob url, click the \"Raw\" link on your map's Github page, and copy the url of the page to which you are taken upon clicking this link.</p> <p>The <code>dct_references_s</code> section of the index map's GeoBlacklight metadata contains relevant external links, and are organized as a serialized JSON array of key/value pairs (for more information on this section in the GeoBlacklight metadata schema, see here). In this case, the blob url which you copied (above) will be the value associated with the OpenIndexMaps url (which is the key).</p> <p>The following site, from the GeoBlacklight team at NYU, provides a script that adds references to existing GeoBlacklight metadata records. This script can be adapted to add the OpenIndexMaps/Blob-url key-value pair into the metadata's <code>dct_references_s</code> section.</p>"},{"location":"item_images/","title":"Add thumbnail images","text":"<p>The GeoBlacklight Sidecar Images plugin adds support for harvesting remote images from geographic web services.</p>"},{"location":"item_images/#requirements","title":"Requirements","text":"<p>GBL Sidecar Images requires:</p> <ul> <li>Ruby on Rails 5.2</li> <li>ImageMagick</li> </ul> <p>A background job processor like Sidekiq is optional, but highly recommended.</p>"},{"location":"item_images/#example-screenshot","title":"Example Screenshot","text":""},{"location":"item_images/#installation-and-use","title":"Installation and Use","text":"<p>See the plugin project repo for full installation and use documentation.</p>"},{"location":"json-geojson/","title":"JSONs and GeoJSONs","text":"<p>Summary</p> <ul> <li>GeoBlacklight metadata files are JSONs</li> <li>OpenIndexMaps are GeoJSONs</li> </ul>"},{"location":"json-geojson/#json","title":"JSON","text":"<p>JSON is a general-purpose data format.</p> <p>JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for machines to parse and generate. JSON is built on two structures:</p> <ul> <li>A collection of name/value pairs (often realized as an object, record, structure, dictionary, hash table, keyed list, or associative arrays)</li> <li>An ordered list of values (often realized as an array, vector, list, or sequence)</li> </ul> <p>JSON is used to represent a wide variety of data structures, including GeoBlacklight metadata files. These files contain a mix of text, numbers, booleans, and arrays, organizing the metadata in a structured way for the Solr index. Although the metadata files contain geospatial coordinates, they are not in the GeoJSONs format.</p> <p>Example</p> <pre><code>[\n  {\n    \"gbl_mdVersion_s\": \"Aardvark\",\n    \"dct_title_s\": \"Sample Record\",\n    \"gbl_resourceClass_sm\": [\n      \"Other\"\n    ],\n    \"gbl_resourceType_sm\": [\n      \"Aerial photographs\"\n    ],\n    \"gbl_indexYear_im\": [\n      \"1900\"\n    ],\n    \"gbl_dateRange_drsim\": [\n      \"[1900 TO 1910]\"\n    ],\n    \"dct_accessRights_s\": \"Public\",\n    \"dct_format_s\": \"JPEG\",\n    \"id\": \"2b22c800-a9fe-4fe1-aee6-f8784f4e987f\",\n  }\n]\n</code></pre>"},{"location":"json-geojson/#geojson","title":"GeoJSON","text":"<p>GeoJSON is a specialized format for representing geographic information.</p> <p>GeoJSON is a specific JSON format for encoding geographic data. It extends JSON by adding geographical features, geometries, and properties. GeoJSON supports the following geometry types: </p> <ul> <li>Point</li> <li>LineString</li> <li>Polygon</li> <li>MultiPoint</li> <li>MultiLineString</li> <li>MultiPolygon</li> <li>GeometryCollection</li> </ul> <p>Example</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-123.365556, 48.428611]\n  },\n  \"properties\": {\n    \"name\": \"Victoria, BC\",\n    \"population\": 85792\n  }\n}\n</code></pre>"},{"location":"leaflet_retina_configuration/","title":"Configure Leaflet for retina displays","text":"<p>GeoBlacklight allows implementers to configure the way in which basemaps and tile layers (WMS) are displayed on high pixel density 'retina' screens. When retina detection settings are enabled, Leaflet will request larger tiles to take advantage of the increased resolution.</p>"},{"location":"leaflet_retina_configuration/#tile-layers","title":"Tile layers","text":"<p>In your application's settings.yml, find <code>DETECT_RETINA</code> and set it to <code>true</code> or <code>false</code>.</p> <pre><code>...\nLEAFLET:\n  MAP:\n  LAYERS:\n    DETECT_RETINA: true\n...\n</code></pre> <p>When set to <code>true</code>, Leaflet will load 512 pixel tiles on retina displays.</p> <p></p>"},{"location":"leaflet_retina_configuration/#basemaps","title":"Basemaps","text":"<p>To configure the stock CartoDB basemaps for higher resolution display you will have to override the <code>GeoBlacklight.Basemaps</code> javascript module. In your application, create a <code>geoblacklight</code> directory in <code>app/assets/javascripts/</code> and then create a new file called <code>basemaps.js</code> in that directory.</p> <p></p> <p>Now copy the contents of the Geoblacklight basemaps.js file into your new file. On any basemaps that you want to enable retina, set <code>detectRetina</code> to <code>true</code>. Your file should look something like this:</p> <pre><code>// basemaps\n\nGeoBlacklight.Basemaps = {\n  darkMatter: L.tileLayer(\n    'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}{retina}.png', {\n      attribution: '&amp;copy; &lt;a href=\"http://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors, &amp;copy; &lt;a href=\"http://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;',\n      maxZoom: 18,\n      worldCopyJump: true,\n      retina: '@2x',\n      detectRetina: true\n    }\n  ),\n  positron: L.tileLayer(\n    'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{retina}.png', {\n      attribution: '&amp;copy; &lt;a href=\"http://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors, &amp;copy; &lt;a href=\"http://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;',\n      maxZoom: 18,\n      worldCopyJump: true,\n      retina: '@2x',\n      detectRetina: true\n    }\n  )\n};\n</code></pre>"},{"location":"metadata/","title":"Metadata","text":"<p>GeoBlacklight uses a lightweight metadata schema designed for geospatial resource discovery. The schema enables keyword searches, faceted refinement, and spatial map searching.</p> <p>Note</p> <p>Metadata for GeoBlacklight is documented on the OpenGeoMetadata website .. Key pages include:</p> <ul> <li>https://opengeometadata.org/ogm-aardvark - OGM Aardvark Schema for GeoBlacklight versions 4.x</li> <li>https://opengeometadata.org/gbl-1.0 - GBL 1.0 Metadata Schema for GeoBlacklight versions 2.x - 3.x</li> <li>https://opengeometadata.org/upgrade-metadata - Upgrading Metadata from GBL 1.0 to OGM Aardvark</li> </ul>"},{"location":"metadata/#metadata-functionality-in-geoblacklight-4x-with-ogm-aardvark","title":"Metadata functionality in GeoBlacklight 4.x (with OGM Aardvark)","text":"<p>Hover over the column headers for sorting options.</p> LabelField URI Required - will cause app to error if missing Default facet Search results display Item show default display Relation widget Notes IDid yes no no no no Functions as the slug (end part) of the item's URL Access Rightsdct_accessRights_s yes no icon no no If set to \"Restricted\", a closed padlock icon appears next to the title. Downloads and web service previews will be hidden unless a user logs in using an authentication process. If set to \"Public\", an open padlock icon appears next to the title. Downloads and web services are accessible. Formatdct_format_s conditional yes no yes no Required if a Download link is included. This value displays on the item show in the button under the download widget. Titledct_title_s no (see notes) no Clickable text yes no If a title is missing, GeoBlacklight will display the ID as the title. Alternative Titledct_alternative_sm no no no yes no - Bounding Boxdcat_bbox no no no no no Rectangular extent required for overlap ratio boosting as part of the overall relevance ranking algorithm. Centroiddcat_centroid no no no no no Can be leveraged for homepage centroid map. Not used in default GeoBlacklight. Creatordct_creator_sm no yes text on expanded view yes no - Date Issueddct_issued_s no no no yes no - Date Rangegbl_dateRange_drsim no no no yes no - Descriptiondct_description_sm no no text on expanded view yes no - Display Notegbl_displayNote_sm no no no yes no Text displays within a callout box File Sizegbl_fileSize_s no no no yes no - Geometrylocn_geometry no no no no no Required for the map search Georeferencedgbl_georeferenced_b no yes no yes no - Identifierdct_identifier_sm no no no no no - Index Yeargbl_indexYear_im no yes text on expanded view yes no Can be used with the Date Range plugin Is Part Ofdct_isPartOf_sm no no no no yes - Is Replaced Bydct_isReplacedBy_sm no no no no no Not used in GeoBlacklight Is Version Ofdct_isVersionOf_sm no no no no yes - Keyworddcat_keyword_sm no no no yes no - Languagedct_language_sm no no no yes no 3 digit code Licensedct_license_sm no no no yes no - Member Ofpcdm_memberOf_sm no no no no yes - Metadata Versiongbl_mdVersion_s no no no no no May be required by some harvesters in OpenGeoMetadata Providerschema_provider_s no yes icon yes no May control which records an authenticated user has access to. Publisherdct_publisher_sm no yes no yes no - Referencesdct_references_s no no no no no See https://opengeometadata.org/reference-uris/ for how different references function in GeoBlacklight Relationdct_relation_sm no no no no yes - Replacesdct_replaces_sm no no no no yes - Resource Classgbl_resourceClass_sm no yes icon yes no GBL will display an icon associated with the value. If multivalued, the first value will be used. Note: there is currently no icon for \"Web services\". Resource Typegbl_resourceType_sm no yes no yes no - Rightsdct_rights_sm no no no yes no - Rights Holderdct_rightsHolder_sm no no no yes no - Sourcedct_source_sm no no no no yes - Spatial Coveragedct_spatial_sm no yes no yes no - Subjectdct_subject_sm no yes no yes no - Suppressedgbl_suppressed_b no no no no no Hides items from search results. Items are only visible as  child or related records in the Relations widgets. Temporal Coveragedct_temporal_sm no no no yes no - Themedcat_theme_sm no yes no yes no - WxS Identifiergbl_wxsIdentifier_s no no no no no Required if a OCG web service is included Modifiedgbl_mdModified_dt no no no no no -"},{"location":"periodic_maintenance/","title":"Periodic Maintenance","text":"<p>Once your GBL application is running in production, you'll need to schedule some periodic maintenance sprints to keep things up to date and running happily.</p>"},{"location":"periodic_maintenance/#test-suite-maintenance","title":"Test Suite Maintenance","text":"<p>The best way to future-proof your GBL install is to write and maintain a local test suite that provides coverage for basic application functionality.</p> <p>As you upgrade versions of GeoBlacklight, Blacklight, Ruby on Rails, or Ruby, this test suite is your insurance that the application is running as expected after these upgrades are implemented. If upon upgrading GeoBlacklight or another core component, you test suite begins to fail, you'll know you have some development work to complete to successfully finish the upgrade.</p>"},{"location":"periodic_maintenance/#geoblacklight-releases","title":"GeoBlacklight Releases","text":"<p>GBL usually releases new versions of the software after the Winter and Summer community sprints. Schedule some time for your local development team to review the latest GBL release and upgrade notes on a biannual timeframe.</p>"},{"location":"periodic_maintenance/#blacklight-releases","title":"Blacklight Releases","text":"<p>Upstream releases of Blacklight can have a significant impact on GeoBlacklight installations. The Blacklight community is very good at leaving deprecation warnings in blacklight releases to help the GeoBlacklight community and local adopters keep their code maintained.</p>"},{"location":"periodic_maintenance/#ruby-and-ruby-on-rails-releases","title":"Ruby and Ruby on Rails Releases","text":"<p>Blacklight and GeoBlacklight will adjust their test matrices for new releases of Ruby and Ruby on Rails to ensure proper support.</p> <p>Commonly, there is no need to rush to upgrade to a new Ruby or Ruby on Rails release, unless there is a significant security issue to resolve.</p>"},{"location":"releases/","title":"Releases","text":"<p>GeoBlacklight release and technology dependency matrix.</p> GBL v3 LTS GBL v4 \u2022 Current Major Release GBL v5 \u2022 Next Major Release Support Status Released 2020; Ends 2025 Released 2022; Ends 2026 ETA 2024 Metadata GBL 1.0 Aardvark Aardvark Ruby v3+ v3+ v3.2+ Ruby on Rails v6-v7 v6-v7 v7.0+ Blacklight v7 v7 v8+ Bootstrap v4 v4 v5 ViewComponents Few Few Many JavaScript (JS) jQuery / ES5 jQuery / ES5 ES6 (Modern JavaScript) Published to NPM JS Map Library Leaflet Leaflet TBD Asset Management Sprockets Sprockets Import Maps + Bundling Apache Solr &lt;= v8 v8-v9+ v9+ Production RDBMS N/A N/A PostgreSQL Background Queue N/A N/A Sidekiq + Redis GeoServer Optional Optional Optional"},{"location":"releases/#recommendations","title":"Recommendations","text":""},{"location":"releases/#metadata","title":"Metadata","text":"<ul> <li>Aardvark (Recommended)</li> <li>GBL 1.0 (Deprecated)</li> </ul>"},{"location":"releases/#ruby","title":"Ruby","text":"<ul> <li>3.2 (Recommended)</li> <li>2.7 / Support Ends 31 Mar 2023</li> </ul>"},{"location":"releases/#ruby-on-rails","title":"Ruby on Rails","text":"<ul> <li>7.0+ (Recommended)</li> <li>6.1</li> <li>6.0 / Support Ends June 1, 2023</li> </ul>"},{"location":"releases/#blacklight","title":"Blacklight","text":"<ul> <li>v7+ (Recommended)</li> <li>v8 / Will be supported in GBL v5+</li> </ul>"},{"location":"releases/#bootstrap","title":"Bootstrap","text":"<ul> <li>v4 (Recommended)</li> <li>v5 / Will be supported in GBL v5+</li> </ul>"},{"location":"releases/#viewcomponents","title":"ViewComponents","text":"<ul> <li>GBL v5 (Required)</li> <li>GBL v4 (Recommended)</li> </ul>"},{"location":"releases/#javascript","title":"Javascript","text":"<ul> <li>GBL v5 - ES6 / Modern Javascript (Required)</li> <li>GBL v4 / jQuery + ES5 (Recommended)</li> </ul>"},{"location":"releases/#map-library","title":"Map Library","text":"<ul> <li>Leaflet (Recommended)</li> <li>TBD / GBL v5+</li> </ul>"},{"location":"releases/#apache-solr","title":"Apache Solr","text":"<ul> <li>v9+ (Recommended)</li> <li>&lt;8.11 versions are End Of Life (EOL)</li> </ul>"},{"location":"releases/#production-rdbms","title":"Production RDBMS","text":"<ul> <li>PostgreSQL (Recommended)<ul> <li>For potential adopters of GEOMG</li> </ul> </li> </ul>"},{"location":"releases/#background-queue","title":"Background Queue","text":"<ul> <li>Not Required</li> <li>Sidekiq + Redis (Recommended)<ul> <li>For potential adopters of GEOMG</li> <li>Potential future GBL enhancement: Background Downloads</li> </ul> </li> </ul>"},{"location":"releases/#geoserver","title":"GeoServer","text":"<ul> <li>Not Required</li> <li>Used by many GeoBlacklight adopters: Harvard, Princeton, Stanford</li> </ul>"},{"location":"rendering_html_from_description/","title":"Render HTML in Metadata Fields","text":""},{"location":"rendering_html_from_description/#rendering-line-breaks-or-html-from-the-description-field","title":"Rendering line breaks or HTML from the Description field","text":"<p>Blacklight includes a helper_method argument for catalog_controller.rb field configuration. You can use that helpful technique to output whatever you need from the solr field value.</p> <p>An example for adding line breaks and even HTML to a dc_description_s field would work like this:</p> <p>1) Add a custom helper for presenting the data, using Rails' simple_format helper</p> <pre><code># ApplicationHelper / application_helper.rb\n\ndef render_html_description(args)\n  simple_format(Array(args[:value]).flatten.join(' '))\nend\n</code></pre> <p>2) Point the show field at your new helper_method</p> <pre><code># CatalogController / catalog_controller.rb\n\nconfig.add_show_field Settings.FIELDS.DESCRIPTION, label: 'Description', itemprop: 'description', helper_method: :render_html_description\n</code></pre> <p>3) Example description value with line breaks (\"\\n\\n\") and some HTML markup, too:</p> <pre><code>  \"dc_description_s\": \"This table shows all 911 police emergency response and officer-initiated calls for service in the City of Detroit since September 20, 2016. Emergency response calls are the result of people calling 911 to request police services.\\n\\n Officer-initiated calls include traffic stops, street investigations and other policing activities (such as observing crimes in progress) where police officers initiate the response. The table includes all calls taken, dispatch, travel, and total response times for those calls serviced by a police agency. The data also include the responding agency, unit, call type and category of each call. Should you have questions about this dataset, you may contact the Commanding Officer of the Detroit Police Department's Crime Intelligence Unit at 313-596-2250 or &lt;a href=\\\"mailto:CrimeIntelligenceBureau@detroitmi.gov\\\"&gt;CrimeIntelligenceBureau@detroitmi.gov&lt;/a&gt;. \",\n</code></pre> <p>4) Now the show page will render like this</p> <p></p>"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#guide-to-settings","title":"Guide to Settings","text":"<p>A lot of configuration for your GeoBlacklight instance will be handled in the settings.yml file.</p> <p>Keep in mind, GeoBlacklight has reasonable defaults for all settings, so you do not need to change anything in order to get up and running. That said, you will eventually need to change something. Below is an annotated list of all variables in the settings file.</p> <p>If you are developing a custom application, look for <code>config/settings.yml</code>. If you are working on the core GeoBlacklight codebase, the file is <code>lib/generators/geoblacklight/templates/settings.yml</code>.</p> <p>Note</p> <p>Settings are implemented with the config gem, and are available as properties of the <code>Settings</code> object throughout the application.</p>"},{"location":"settings/#application_logo_url","title":"<code>APPLICATION_LOGO_URL</code>","text":"<p>URL for logo image to be used in generated Carto OneClick links.</p>"},{"location":"settings/#carto_oneclick_link","title":"<code>CARTO_ONECLICK_LINK</code>","text":"<p>Optional integration with Carto OneClick Service.</p>"},{"location":"settings/#arcgis_base_url","title":"<code>ARCGIS_BASE_URL</code>","text":"<p>Used to view layers directly in ArcGIS online. More information in the ArcGIS Online documentation.</p>"},{"location":"settings/#download_path","title":"<code>DOWNLOAD_PATH</code>","text":"<p>Local path used for temporary storage of generated download files.</p>"},{"location":"settings/#bbox_within_boost","title":"<code>BBOX_WITHIN_BOOST</code>","text":"<p>The SOLR Boost Query value for spatial search matches within a bounding box.</p>"},{"location":"settings/#overlap_ratio_boost","title":"<code>OVERLAP_RATIO_BOOST</code>","text":"<p>The SOLR Boost Functions value for overlap ratio.</p>"},{"location":"settings/#homepage_map_geom","title":"<code>HOMEPAGE_MAP_GEOM</code>","text":"<p>Leave <code>null</code> to default to entire world, or add a stringified GeoJSON object to scope initial render of the map on the homepage of the application.</p>"},{"location":"settings/#gbl_params","title":"<code>GBL_PARAMS</code>","text":"<p>Explicit list of whitelisted URL params that can be used within the application, enforced via Rails StrongParameters.</p> <p>Note</p> <p>If you are trying to use a new URL param within your app, you will need to register it here. You may see \"unpermitted parameters\" errors until you update this setting.</p>"},{"location":"settings/#fields","title":"<code>FIELDS</code>","text":"<p>All metadata fields are linked with their respective identifiers in the SOLR index in this hash. To learn more about the default GeoBlacklight metadata schema, Aardvark, view the OGM Aardvark specification.</p>"},{"location":"settings/#institution","title":"<code>INSTITUTION</code>","text":"<p>This setting should hold the name of your institution, and can be used to help determine access to restricted records. In some GeoBlacklight implementations, for example, when a restricted record's <code>schema_provider_s</code> field matches <code>Settings.INSTITUTION</code>, authenticated users will be granted full access.</p>"},{"location":"settings/#metadata_shown","title":"<code>METADATA_SHOWN</code>","text":"<p>Enables links for various metadata formats in the tool panel for a record if the corresponding URI key is present in that record's <code>dct_references_s</code> field.</p>"},{"location":"settings/#timeout_download","title":"<code>TIMEOUT_DOWNLOAD</code>","text":"<p>(For external Download) <code>timeout</code> and <code>open_timeout</code> parameters for Faraday.</p>"},{"location":"settings/#timeout_wms","title":"<code>TIMEOUT_WMS</code>","text":"<p>(For WMS inspection) <code>timeout</code> and <code>open_timeout</code> parameters for Faraday.</p>"},{"location":"settings/#use_geom_for_relations_icon","title":"<code>USE_GEOM_FOR_RELATIONS_ICON</code>","text":"<p>Use the Geometry Type value from a record to determine what icon to use for its data relations.</p> <p>Warning</p> <p>This setting is only applicable for GBL 1.0 metadata and is not compatible with OGM Aardvark.</p>"},{"location":"settings/#webservices_shown","title":"<code>WEBSERVICES_SHOWN</code>","text":"<p>A list of web services that will be available for a record, if that record has a corresponding URI key in its <code>dct_references_s</code> field.</p> <p>For example, if a record's references include a <code>wms</code> entry, and <code>WEBSERVICES_SHOWN</code> includes <code>wms</code> (as it does by default), a preview map will appear in the tool panel showing the WMS layer.</p> <p>Supported web services:</p> <pre><code>  - 'wms'\n  - 'tms'\n  - 'wfs'\n  - 'xyz'\n  - 'wmts'\n  - 'tilejson'\n  - 'iiif'\n  - 'feature_layer'\n  - 'tiled_map_layer'\n  - 'dynamic_map_layer'\n  - 'image_map_layer'\n</code></pre>"},{"location":"settings/#display_notes_shown","title":"<code>DISPLAY_NOTES_SHOWN</code>","text":"<p>Configuration for special rendering of <code>gbl_displayNote_sm</code> field values. Default note types are <code>danger</code>, <code>info</code>, <code>tip</code>, and <code>warning</code>.</p> <p>You can add your own display note configuration as well. Each entry must have the follow properties:</p> bootstrap_alert_class Name of Bootstrap alert class to use for the note's container icon Name of GeoBlacklight SVG icon to display with note note_prefix String that will be used at the beginning of a <code>gbl_displayNote_sm</code> entry to trigger this particular rendering. <p>For example, the \"info\" note is configured like this:</p> <pre><code>DISPLAY_NOTES_SHOWN\n  info:\n    bootstrap_alert_class: alert-info\n    icon: circle-info-solid\n    note_prefix: \"Info: \"\n</code></pre> <p>Info</p> <p>Display Notes will appear in GeoBlacklight in a similar manner to this admonition box.</p>"},{"location":"settings/#relationships_shown","title":"<code>RELATIONSHIPS_SHOWN</code>","text":"<p>GeoBlacklight supports many different types of relations between records. Configuration for how these are displayed is stored here. Each relationship defined must have the following properties:</p> field The SOLR field that the query is performed against query_type The type of query sent to SOLR icon GeoBlacklight icon to use for matched records label Label from the locale string translations file inverse The inverse relationship to this one, used to generate bidirectional linkages <p>For example, the <code>MEMBER_OF_ANCESTORS</code> relationship would be defined like so (note that the <code>MEMBER_OF_DESCENDANTS</code> relationship would also need to be defined as it is referenced in the <code>inverse</code> property):</p> <pre><code>RELATIONSHIPS_SHOWN:\n  MEMBER_OF_ANCESTORS:\n    field: pcdm_memberOf_sm\n    icon: parent-item\n    inverse: :MEMBER_OF_DESCENDANTS\n    label: geoblacklight.relations.member_of_ancestors\n    query_type: ancestors\n</code></pre>"},{"location":"settings/#wms_params","title":"<code>WMS_PARAMS</code>","text":"<p>These parameters are appended to all WMS endpoints that your records contain. If you always want to be requesting <code>VERSION=1.3.0</code> services, for example, you would update that here.</p> <p>Default values:</p> <pre><code>  :SERVICE: 'WMS'\n  :VERSION: '1.1.1'\n  :REQUEST: 'GetFeatureInfo'\n  :STYLES: ''\n  :SRS: 'EPSG:4326'\n  :EXCEPTIONS: 'application/json'\n  :INFO_FORMAT: 'text/html'\n</code></pre>"},{"location":"settings/#leaflet","title":"<code>LEAFLET</code>","text":"<p>GeoBlacklight uses Leaflet to power its web map interfaces. This setting contains many default configuration values for how these maps appear and behave.</p> <p>A few common customizations of GeoBlacklight involve updates to this setting:</p> <ul> <li>Adding Leaflet Controls</li> <li>Configuring Leaflet for Retina Displays</li> </ul>"},{"location":"settings/#help_text","title":"<code>HELP_TEXT</code>","text":"<p>Labels shown in the popover for various viewer protocols, to provide more context for users. The values here must reference entries in the locale translation string file.</p>"},{"location":"settings/#sidebar_static_map","title":"<code>SIDEBAR_STATIC_MAP</code>","text":"<p>Show a sidebar static map for items with the listed viewer protocols.</p> <p>Default values:</p> <pre><code>  - 'iiif'\n  - 'iiif_manifest'\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>These tutorials were developed by members of the GeoBlacklight community and are designed to help users get started with GeoBlacklight. </p> <p>Works in progress</p> <p>We are currently in the process of updating these tutorials. Please contact us using one of the options listed on our Connect page with any questions or challenges you encounter.</p> <ul> <li>Developing and customizing GeoBlacklight</li> <li>A hands on introduction to GeoBlacklight</li> <li>Using Packer to create a development virtual machine for GeoBlacklight</li> <li>Using GeoCombine to harvest and index OpenGeoMetadata</li> </ul>"},{"location":"upgrade_version_2_0/","title":"Upgrade to Version 2.0","text":""},{"location":"upgrade_version_2_0/#upgrading-to-geoblacklight-20","title":"Upgrading to GeoBlacklight 2.0","text":"<p>While we suggest using the latest version of GeoBlacklight to take advantage of its modern features, sometimes you need to upgrade to an older release. GeoBlacklight 2.0 adds support for Blacklight 7.0, which itself includes several significant component upgrades:</p> <ul> <li>Bootstrap 4</li> <li>Rails 5.2 support</li> <li>Webpacker support (see below)</li> <li>JSON-API support</li> <li>Solr 7.2+ support</li> </ul> <p>The Bootstrap 3 to Bootstrap 4 migration will require existing GeoBlacklight installations to update any local view or layout customizations they have created. See the Blacklight guide on updating Bootstrap for additional assistance.</p>"},{"location":"upgrade_version_2_0/#blacklight-7-upgrades","title":"Blacklight 7 upgrades","text":""},{"location":"upgrade_version_2_0/#update-user-model","title":"Update User Model","text":"<p>With the release of Blacklight 7, the <code>Blacklight::Utils</code> Module has been deprecated.  <code>User</code> Models must have the following removed:</p> <pre><code>class User &lt; ApplicationRecord\n  ## Please remove or comment this code:\n  ##\n  # if Blacklight::Utils.needs_attr_accessible?\n  #   attr_accessible :email, :password, :password_confirmation\n  # end\n\n  # Connects this user object to Blacklights Bookmarks.\n  include Blacklight::User\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :validatable\n\n  # Method added by Blacklight; Blacklight uses #to_s on your\n  # user class to get a user-displayable login/identifier for\n  # the account.\n  def to_s\n    email\n  end\nend\n</code></pre>"},{"location":"upgrade_version_2_0/#update-catalogcontroller","title":"Update CatalogController","text":"<p>Release 2.0 provides the ability to request JSON representations of Solr Documents by using the  path <code>/catalog/:id/raw</code> In other words, append <code>/raw</code> to the end of a catalog URL stem. Note that this is different from previous versions of GeoBlacklight and is a result of Blacklight 7 incorporating a JSON:API compliant specification. Appending <code>.json</code> to the end of a catalog URL stem will now return a JSON:API compliant record, which is nested and not Solr compatible. For more information, see the metadata documentation.</p> <p>The JSON record return is enabled within the <code>CatalogController</code> by setting <code>config.raw_endpoint.enabled</code> to <code>true</code>:   <pre><code>  configure_blacklight do |config|\n\n    # Ensures that JSON representations of Solr Documents can be retrieved using\n    # the path /catalog/:id/raw\n    # Please see https://github.com/projectblacklight/blacklight/pull/2006/\n    config.raw_endpoint.enabled = true\n\n    ## Default parameters to send to solr for all search-like requests. See also SolrHelper#solr_search_params\n    ## @see https://lucene.apache.org/solr/guide/6_6/common-query-parameters.html\n    ## @see https://lucene.apache.org/solr/guide/6_6/the-dismax-query-parser.html#TheDisMaxQueryParser-Theq.altParameter\n    config.default_solr_params = {\n</code></pre></p>"},{"location":"upgrade_version_2_0/#webpacker","title":"Webpacker","text":"<p>Rails currently offers the ability for one to manage JavaScript source files and package dependencies using the Webpacker Gem.  By default, this is available for usage in GeoBlacklight, but not enabled.</p>"},{"location":"upgrade_version_2_0/#requirements","title":"Requirements","text":"<p>Webpacker requires that either Yarn or the Node Package Manager be installed in the environment where the GeoBlacklight implementation is deployed.</p>"},{"location":"upgrade_version_2_0/#installing-webpacker","title":"Installing Webpacker","text":"<p>From within the root directory path of the GeoBlacklight application, please execute the following:   <pre><code>bundle exec rails generate geoblacklight:webpacker --force\n</code></pre></p> <p>This will create a number of directories and files, most notably:   - <code>package.json</code>   - <code>app/javascript/packs/application.js</code></p> <p>Running <code>yarn install</code> or <code>npm install</code>, followed by <code>yarn upgrade</code>/<code>npm update</code> would be best in order to install and update any JavaScript dependencies.</p>"},{"location":"upgrade_version_2_0/#adding-packs","title":"Adding packs","text":"<p>In order to add JavaScript packs to a GeoBlacklight application, one should override the view template <code>app/views/layouts/blacklight/base.html.erb</code> (provided in https://github.com/projectblacklight/blacklight/blob/v7.0.1/app/views/layouts/blacklight/base.html.erb) with the following line:   <pre><code>    &lt;%= javascript_include_tag \"application\" %&gt;\n    &lt;%= javascript_pack_tag 'application' %&gt;\n    &lt;%= csrf_meta_tags %&gt;\n    &lt;%= content_for(:head) %&gt;\n  &lt;/head&gt;\n</code></pre></p> <p>For any new JS file added to <code>app/javascript/packs</code>, this will need to be added with a different name.  For example, <code>app/javascript/packs/my_new_script.js</code> would be added with:   <pre><code>    &lt;%= javascript_include_tag \"application\" %&gt;\n    &lt;%= javascript_pack_tag 'application' %&gt;\n    &lt;%= javascript_pack_tag 'my_new_script' %&gt;\n    &lt;%= csrf_meta_tags %&gt;\n    &lt;%= content_for(:head) %&gt;\n  &lt;/head&gt;\n</code></pre></p>"},{"location":"upgrade_version_2_0/#running-the-webpack-server","title":"Running the Webpack server","text":"<p>Release 2.0 uses the Foreman Gem in order to run both the Rails server and Webpack development server in parallel.  This is useful for development environments where the Webpack dev. server listens for source file changes, and automatically recompiles packs.  A file (named <code>Procfile</code>) within the root path of the application should be created with the following content:   <pre><code>rails: bin/rails server --port=3000\nwebpack: bin/webpack-dev-server\n</code></pre></p> <p>This can then be executed using <code>bundle exec foreman start</code>.</p> <p>For deployments to testing, staging, or production environments, it is perhaps preferred to simply precompile the Webpack builds.  This can be achieved with the task <code>bundle exec rails webpacker:compile</code></p>"},{"location":"upgrade_version_2_0/#geoblacklight-updates","title":"GeoBlacklight updates","text":""},{"location":"upgrade_version_2_0/#dropped-leaflet-rails-vendorized-a-rails-savvy-leafletjs-file","title":"Dropped leaflet-rails; Vendorized a rails-savvy leaflet.js file","text":"<p>To fix a Leaflet FeatureLayer asset path issue, we decided to remove leaflet-rails as a gem dependency. Instead of the gem, we're now using a slightly modified leaflet.js file in vendor/javascripts.</p> <p>For existing GBL installations, you will need to remove the require leaflet-rails statement from lib/geoblacklight/engine.rb to avoid an error upon application restart.</p>"},{"location":"upgrade_version_2_0/#added-spatial-search-bbox-overlapratio-relevancy-option","title":"Added Spatial Search BBox overlapRatio Relevancy Option","text":"<p>A new Settings constant was added to provide optional support for Solr's BBoxField overlapRatio relevancy boosting within spatial searches.</p> <p>For existing GBL installations, you will need to add the Settings.OVERLAP_RATIO_BOOST setting to your settings.yml file.</p> <pre><code>    # The bf boost value for overlap ratio\n    OVERLAP_RATIO_BOOST: '2'\n</code></pre> <p>If this option has a value, the boost will be appended to the spatial search like so:</p> <pre><code>    if Settings.OVERLAP_RATIO_BOOST\n      solr_params[:overlap] =\n        \"{!field uf=* defType=lucene f=solr_bboxtype score=overlapRatio}Intersects(#{envelope_bounds})\"\n      solr_params[:bf] = \"$overlap^#{Settings.OVERLAP_RATIO_BOOST}\"\n    end\n</code></pre>"},{"location":"upgrade_version_2_0/#relevancy-is-best-tuned-locally","title":"Relevancy is Best Tuned Locally","text":"<p>Everyone's idea of relevancy is different. The default boost value here (\"2\") might not be the best for your collection or user needs. Please adjust this relevancy boost as necessary to ensure best results for your GBL install.</p>"},{"location":"upgrade_version_2_0/#homepage","title":"Homepage","text":"<p>The <code>_homepage_text.html.erb</code> view partial has been updated to use a view component for rendering the featured facets feature. You should update any local customizations to this file to use the components.</p>"},{"location":"upgrade_version_4_0/","title":"Upgrading to GeoBlacklight 4.0","text":"<p>There are several steps to complete this major release upgrade. Detailed notes follow for each of the following upgrade steps:</p> <ol> <li>Gemfile</li> <li>Apache Solr</li> <li>Data Migration</li> <li>Application Configuration</li> <li>Application Changes</li> </ol>"},{"location":"upgrade_version_4_0/#1-gemfile","title":"1. Gemfile","text":"<p>Update your <code>Gemfile</code> to GBL v4:</p> <pre><code>  gem 'geoblacklight', '~&gt; 4.0'\n</code></pre>"},{"location":"upgrade_version_4_0/#2-apache-solr","title":"2. Apache Solr","text":"<p>GeoBlacklight now requires Solr 8.3 or higher.</p> <p>GBL's Solr configuration files are updated to reflect the Aardvark metadata element list and support new complex geometries features. See the default versions of schema.xml and solrconfig.xml and update your local files as necessary.</p> <ul> <li>solr/config/schema.xml</li> <li>solr/config/solrconfig.xml</li> </ul>"},{"location":"upgrade_version_4_0/#3-data-migration","title":"3. Data Migration","text":"<p>Migrate your Solr documents from the GBL v1.0 metadata standard to OGM Aardvark. GBL community documentation and migration tools are listed below:</p> <ul> <li>OGM's Guide for Upgrading Metadata</li> <li>Full GBL 1.0 to OGM Aardvark Crosswalk</li> <li>Tools and Techniques for Upgrading</li> <li>gbl2aardvark: convert GeoBlacklight 1.0 json files to Aardvark </li> </ul>"},{"location":"upgrade_version_4_0/#4-application-configuration","title":"4. Application Configuration","text":"<p>Review the configuration files for your GBL instance. You will need to update your <code>settings.yml</code> file and <code>catalog_controller.rb</code> file to use the new Aardvark field mappings. See the default versions of these files in GeoBlacklight v4 and alter your files as necessary:</p> <p>You will also need to search your local application code for any old <code>Settings.FIELDS.(X)</code> mappings and update them as necessary.</p>"},{"location":"upgrade_version_4_0/#settings","title":"Settings","text":"<p><code>config/settings.yml</code></p> <p>Many GBLv4 configuration changes take place in the <code>settings.yml</code> file.</p> <p>List of GBLv4 settings.yml changes:</p> <ul> <li>Solr field mappings: Settings.FIELDS</li> <li>GeoBlacklight Params: Settings.GBL_PARAMS</li> <li>Relationships to display: Settings.RELATIONSHIPS_SHOWN</li> <li>Parent/Child SVG Icon titles</li> </ul>"},{"location":"upgrade_version_4_0/#solr-field-mappings-settingsfields","title":"Solr field mappings: Settings.FIELDS","text":"<p>With the adoption of the OGM Aardvark metadata schema, we need to update all the <code>Settings.FIELDS</code> values for Aardvark. Here are the default GBLv4 values. If you have additional local customizations here, you'll need carry those over, too.</p> <pre><code># Solr field mappings\nFIELDS:\n  :ACCESS_RIGHTS: 'dct_accessRights_s'\n  :ALTERNATIVE_TITLE: 'dct_alternative_sm'\n  :CENTROID: 'dcat_centroid'\n  :CREATOR: 'dct_creator_sm'\n  :DATE_ISSUED: 'dct_issued_s'\n  :DATE_RANGE: 'gbl_dateRange_drsim'\n  :DESCRIPTION: 'dct_description_sm'\n  :FORMAT: 'dct_format_s'\n  :FILE_SIZE: 'gbl_fileSize_s'\n  :GEOREFERENCED: 'gbl_georeferenced_b'\n  :ID: 'id'\n  :IDENTIFIER: 'dct_identifier_sm'\n  :INDEX_YEAR: 'gbl_indexYear_im'\n  :IS_PART_OF: 'dct_isPartOf_sm'\n  :IS_REPLACED_BY: 'dct_isReplacedBy_sm'\n  :THEME: 'dcat_theme_sm'\n  :KEYWORD: 'dcat_keyword_sm'\n  :LANGUAGE: 'dct_language_sm'\n  :LAYER_MODIFIED: 'gbl_mdModified_dt'\n  :LICENSE: 'dct_license_sm'\n  :MEMBER_OF: 'pcdm_memberOf_sm'\n  :METADATA_VERSION: 'gbl_mdVersion_s'\n  :MODIFIED: 'gbl_mdModified_dt'\n  :OVERLAP_FIELD: 'solr_bboxtype'\n  :PUBLISHER: 'dct_publisher_sm'\n  :PROVIDER: 'schema_provider_s'\n  :REFERENCES: 'dct_references_s'\n  :RELATION: 'dct_relation_sm'\n  :REPLACES: 'dct_replaces_sm'\n  :RESOURCE_CLASS: 'gbl_resourceClass_sm'\n  :RESOURCE_TYPE: 'gbl_resourceType_sm'\n  :RIGHTS: 'dct_rights_sm'\n  :RIGHTS_HOLDER: 'dct_rightsHolder_sm'\n  :SOURCE: 'dct_source_sm'\n  :SPATIAL_COVERAGE: 'dct_spatial_sm'\n  :GEOMETRY: 'locn_geometry'\n  :SUBJECT: 'dct_subject_sm'\n  :SUPPRESSED: 'gbl_suppressed_b'\n  :TEMPORAL_COVERAGE: 'dct_temporal_sm'\n  :TITLE: 'dct_title_s'\n  :VERSION: 'dct_isVersionOf_sm'\n  :WXS_IDENTIFIER: 'gbl_wxsIdentifier_s'\n</code></pre>"},{"location":"upgrade_version_4_0/#geoblacklight-params","title":"GeoBlacklight Params","text":"<p><code>Settings.GBL_PARAMS</code></p> <p>Add the GBL_PARAMS array to <code>settings.yml</code> to whitelist the GBL application params so they are appended to controller methods and search builder queries.</p> <pre><code># Non-search-field GeoBlacklight application permitted params\nGBL_PARAMS:\n  - :bbox\n  - :email\n  - :file\n  - :format\n  - :id\n  - :logo\n  - :provider\n  - :type\n  - :BBOX\n  - :HEIGHT\n  - :LAYERS\n  - :QUERY_LAYERS\n  - :URL\n  - :WIDTH\n  - :X\n  - :Y\n</code></pre>"},{"location":"upgrade_version_4_0/#relationships-to-display","title":"Relationships to display","text":"<p><code>Settings.RELATIONSHIPS_SHOWN</code></p> <p>The number of item/parent/collection relationships supported within GBLv4 has grown considerably. Add these default values to support the new relationships. You can also add additional relationship keys, fields, and query_types to support local customizations.</p> <pre><code># Relationships to display\nRELATIONSHIPS_SHOWN:\n  MEMBER_OF:\n    field: pcdm_memberOf_sm\n    query_type: ancestors\n    icon: nil\n    label: geoblacklight.relations.member_of\n  PART_OF_ANCESTORS:\n    field: dct_isPartOf_sm\n    query_type: ancestors\n    icon: nil\n    label: geoblacklight.relations.part_of_ancestors\n  PART_OF_DESCENDANTS:\n    field: dct_isPartOf_sm\n    query_type: descendants\n    icon: child-item\n    label: geoblacklight.relations.part_of_descendants\n  RELATION:\n    field: dct_relation_sm\n    query_type: ancestors\n    icon: nil\n    label: geoblacklight.relations.relation\n  REPLACES:\n    field: dct_replaces_sm\n    query_type: ancestors\n    icon: nil\n    label: geoblacklight.relations.replaces\n  REPLACED_BY:\n    field: dct_isReplacedBy_sm\n    query_type: descendants\n    icon: nil\n    label: geoblacklight.relations.replaced_by\n  SOURCE_ANCESTORS:\n    field: dct_source_sm\n    query_type: ancestors\n    icon: parent-item\n    label: geoblacklight.relations.ancestor\n  SOURCE_DESCENDANTS:\n    field: dct_source_sm\n    query_type: descendants\n    icon: child-item\n    label: geoblacklight.relations.descendant\n  VERSION_OF:\n    field: dct_isVersionOf_sm\n    query_type: descendants\n    icon: nil\n    label: geoblacklight.relations.version_of\n</code></pre>"},{"location":"upgrade_version_4_0/#parentchild-svg-icon-titles","title":"Parent/Child SVG Icon titles","text":"<p>Replace these relationship icon file names.</p> <pre><code>SOURCE_ANCESTORS:\n  field: dct_source_sm\n  query_type: ancestors\n- icon: pagelines-brands\n+ icon: parent-item\n  label: geoblacklight.relations.ancestor\nSOURCE_DESCENDANTS:\n  field: dct_source_sm\n  query_type: descendants\n- icon: leaf\n+ icon: child-item\n  label: geoblacklight.relations.descendant\nVERSION_OF:\n  field: dct_isVersionOf_sm\n</code></pre>"},{"location":"upgrade_version_4_0/#viewer-controls","title":"Viewer Controls","text":"<p><code>Settings.LEAFLET.VIEWERS.*.CONTROLS</code></p> <p>GBLv4 includes native support for the <code>Leaflet.fullscreen</code> plugin. Update your Leaflet configuration to include the <code>Fullscreen</code> viewer option.</p> <pre><code># Settings for leaflet\nLEAFLET:\n  ...\n  VIEWERS:\n    DYNAMICMAPLAYER:\n      CONTROLS:\n        - 'Opacity'\n        - 'Fullscreen'\n    FEATURELAYER:\n      CONTROLS:\n        - 'Opacity'\n        - 'Fullscreen'\n    IIIF:\n      CONTROLS:\n        - 'Fullscreen'\n    IMAGEMAPLAYER:\n      CONTROLS:\n        - 'Opacity'\n        - 'Fullscreen'\n    INDEXMAP:\n      CONTROLS:\n        - 'Fullscreen'\n    TILEDMAPLAYER:\n      CONTROLS:\n        - 'Opacity'\n        - 'Fullscreen'\n    WMS:\n      CONTROLS:\n        - 'Opacity'\n        - 'Fullscreen'\n</code></pre>"},{"location":"upgrade_version_4_0/#catalogcontroller","title":"CatalogController","text":"<p><code>app/controllers/catalog_controller.rb</code></p> <p>Besides the <code>settings.yml</code> configuration changes above, the <code>catalog_controller.rb</code> file holds a great deal of application configuration and it needs to be updated for the new <code>Settings.FIELD</code> values.</p> <p>It may be helpful to review the diff of changes to catalog_controller.rb from v3.8.0 to v4.0.0</p> <p>Here is a list of GBL v4 catalog_controller.rb changes:</p>"},{"location":"upgrade_version_4_0/#default-solr-params","title":"Default Solr Params","text":"<p><code>config.default_document_solr_params</code></p> <p>This uses the Settings.FIELDS.ID field now.</p> <pre><code>  ## Default parameters to send on single-document requests to Solr...\n  config.default_document_solr_params = {\n    :qt =&gt; 'document',\n    :q =&gt; \"{!raw f=#{Settings.FIELDS.ID} v=$id}\"\n  }\n</code></pre>"},{"location":"upgrade_version_4_0/#view-defaults","title":"View Defaults","text":"<p><code>config.view</code> defaults</p> <p>Adds the \"map\" split view for catalog#index</p> <pre><code>    # GeoBlacklight Defaults\n    # * Adds the \"map\" split view for catalog#index\n    config.view.split(partials: ['index'])\n    config.view.delete_field('list')\n</code></pre>"},{"location":"upgrade_version_4_0/#facet-fields","title":"Facet Fields","text":"<p><code>config.add_facet_field(s)</code></p> <p>These are all now mapped to Aardvark fields. Note: 'icon_facet' partials are now replaced by the <code>item_component: Geoblacklight::IconFacetItemComponent</code></p> <pre><code>    # FACETS\n\n    # DEFAULT FACETS\n    # to add additional facets, use the keys defined in the settings.yml file\n    config.add_facet_field Settings.FIELDS.INDEX_YEAR, :label =&gt; 'Year', :limit =&gt; 10\n    config.add_facet_field Settings.FIELDS.SPATIAL_COVERAGE, :label =&gt; 'Place', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.ACCESS_RIGHTS, label: 'Access', limit: 8, item_component: Geoblacklight::IconFacetItemComponent\n    config.add_facet_field Settings.FIELDS.RESOURCE_CLASS, label: 'Resource Class', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.RESOURCE_TYPE, label: 'Resource Type', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.FORMAT, :label =&gt; 'Format', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.SUBJECT, :label =&gt; 'Subject', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.THEME, :label =&gt; 'Theme', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.CREATOR, :label =&gt; 'Creator', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.PUBLISHER, :label =&gt; 'Publisher', :limit =&gt; 8\n    config.add_facet_field Settings.FIELDS.PROVIDER, label: 'Provider', limit: 8, item_component: Geoblacklight::IconFacetItemComponent\n    config.add_facet_field Settings.FIELDS.GEOREFERENCED, :label =&gt; 'Georeferenced', :limit =&gt; 3\n</code></pre>"},{"location":"upgrade_version_4_0/#gbl-application-facets","title":"GBL Application Facets","text":"<p>Our map-based search feature is now run via a series of (Geo)Blacklight class extensions which require this configuration:</p> <pre><code>    # GEOBLACKLIGHT APPLICATION FACETS\n\n    # Map-Based \"Search Here\" Feature\n    # item_presenter       - Defines how the facet appears in the GBL UI\n    # filter_query_builder - Defines the query generated for Solr\n    # filter_class         - Defines how to add/remove facet from query\n    # label                - Defines the label used in contstraints container\n    config.add_facet_field Settings.FIELDS.GEOMETRY, item_presenter: Geoblacklight::BboxItemPresenter, filter_class: Geoblacklight::BboxFilterField, filter_query_builder: Geoblacklight::BboxFilterQuery, within_boost: Settings.BBOX_WITHIN_BOOST, overlap_boost: Settings.OVERLAP_RATIO_BOOST, overlap_field: Settings.FIELDS.OVERLAP_FIELD, label: 'Bounding Box'\n</code></pre>"},{"location":"upgrade_version_4_0/#item-relationship-facets","title":"Item Relationship Facets","text":"<p>To display item-to-item relationships, add this block below:</p> <pre><code>    # Item Relationship Facets\n    # * Not displayed to end user (show: false)\n    # * Must be present for relationship \"Browse all 4 records\" links to work\n    # * Label value becomes the search contraint filter name\n    config.add_facet_field Settings.FIELDS.MEMBER_OF, label: \"Member Of\", show: false\n    config.add_facet_field Settings.FIELDS.IS_PART_OF, label: \"Is Part Of\", show: false\n    config.add_facet_field Settings.FIELDS.RELATION, label: \"Related\", show: false\n    config.add_facet_field Settings.FIELDS.REPLACES, label: \"Replaces\", show: false\n    config.add_facet_field Settings.FIELDS.IS_REPLACED_BY, label: \"Is Replaced By\", show: false\n    config.add_facet_field Settings.FIELDS.SOURCE, label: \"Source\", show: false\n    config.add_facet_field Settings.FIELDS.VERSION, label: \"Is Version Of\", show: false\n</code></pre>"},{"location":"upgrade_version_4_0/#index-fields","title":"Index Fields","text":"<p><code>config.add_index_field(s)</code></p> <p>The \"Index Fields\" are the values that appear on search results lists. These have been mapped to Aardvark fields.</p> <pre><code>    config.add_index_field Settings.FIELDS.INDEX_YEAR\n    config.add_index_field Settings.FIELDS.CREATOR\n    config.add_index_field Settings.FIELDS.DESCRIPTION, helper_method: :snippit\n    config.add_index_field Settings.FIELDS.PUBLISHER\n</code></pre>"},{"location":"upgrade_version_4_0/#show-fields","title":"Show Fields","text":"<p><code>config.add_show_field(s)</code></p> <p>The \"Show Fields\" are the values that appear on an item detail page. These have been mapped to Aardvark fields, and many non-activated optional fields have been added to the default <code>catalog_controller.rb</code> file, too.</p> <p>View \"Show Field\" configuration online</p>"},{"location":"upgrade_version_4_0/#sort-fields","title":"Sort Fields","text":"<p><code>config.add_sort_field(s)</code></p> <p>The GBLv4 default sort fields options have been expanded. Here is the new default value for sorting:</p> <pre><code>    config.add_sort_field 'score desc, dct_title_sort asc', :label =&gt; 'Relevance'\n    config.add_sort_field \"#{Settings.FIELDS.INDEX_YEAR} desc, dct_title_sort asc\", :label =&gt; 'Year (Newest first)'\n    config.add_sort_field \"#{Settings.FIELDS.INDEX_YEAR} asc, dct_title_sort asc\", :label =&gt; 'Year (Oldest first)'\n    config.add_sort_field 'dct_title_sort asc', :label =&gt; 'Title (A-Z)'\n    config.add_sort_field 'dct_title_sort desc', :label =&gt; 'Title (Z-A)'\n</code></pre>"},{"location":"upgrade_version_4_0/#web-services-changes","title":"Web Services Changes","text":"<p>Our web_services method is no longer a show tool partial. Migrating from GBLv3 to GBLv4, you will need to remove your <code>config.add_show_tools_partial :web_services...</code> line and add the new <code>def web_services</code> method:</p> <p>View new method online</p> <pre><code>  # Custom tools for GeoBlacklight\n- config.add_show_tools_partial :web_services, if: proc { |_context, _config, options| options[:document] &amp;&amp; (Settings.WEBSERVICES_SHOWN &amp; options[:document].references.refs.map(&amp;:type).map(&amp;:to_s)).any? }\n</code></pre> <pre><code>  def web_services\n    @response, @documents = action_documents\n\n    respond_to do |format|\n      format.html do\n        return render layout: false if request.xhr?\n        # Otherwise draw the full page\n      end\n    end\n  end\n</code></pre>"},{"location":"upgrade_version_4_0/#locales","title":"Locales","text":"<p><code>config/locales/geoblacklight.en.yml</code></p> <p>We have added additional relations entries for GBLv4 config/locales/geoblacklight.en.yml.</p> <p>If you have local overrides or customizations to this file, please include the new relations entries locally.</p>"},{"location":"upgrade_version_4_0/#5-application-changes","title":"5. Application Changes","text":""},{"location":"upgrade_version_4_0/#applicationcontroller","title":"ApplicationController","text":"<p><code>app/controllers/application_controller.rb</code></p> <p>GBL installer now includes a <code>before_action</code> method to permit GBL application params. You'll need to add this code to your application_controller.rb file:</p> <pre><code>  before_action :allow_geoblacklight_params\n\n  def allow_geoblacklight_params\n    # Blacklight::Parameters will pass these to params.permit\n    blacklight_config.search_state_fields.append(Settings.GBL_PARAMS)\n  end\n</code></pre>"},{"location":"upgrade_version_4_0/#stylesheets","title":"Stylesheets","text":"<p><code>app/assets/stylesheets/application.scss</code></p> <p>GBL v4 no longer vendorizes the <code>leaflet-label</code> stylesheet. Check your local stylesheet files and remove any <code>*= require leaflet-label</code> or <code>@import 'leaflet-label';</code> lines.</p> <pre><code>- /*\n- *= require leaflet-label\n- */\n</code></pre>"},{"location":"upgrade_version_4_0/#javascripts","title":"JavaScripts","text":"<p><code>app/assets/javascript/</code></p> <p>GBL v4 adds a new Leaflet control: Leaflet.fullzoom. If you previously added this feature to your local GBL instance, you'll want to remove your custom implementation. This control can be added to your maps via the <code>settings.yml</code> file (see documentation above).</p>"},{"location":"upgrade_version_4_0/#homepage","title":"Homepage","text":"<p>The <code>_homepage_text.html.erb</code> view partial has been updated to use a view component for rendering the featured facets feature. You should update any local customizations to this file to use the components.</p> <pre><code>    &lt;div class='col-sm'&gt;\n      &lt;%= content_tag :h3, t('geoblacklight.home.category_heading') %&gt;\n      &lt;div class='row'&gt;\n        &lt;%= render(Geoblacklight::HomepageFeatureFacetComponent.new(icon: 'home', label: 'geoblacklight.home.institution', facet_field: Settings.FIELDS.PROVIDER, response: @response)) %&gt;\n\n        &lt;%= render(Geoblacklight::HomepageFeatureFacetComponent.new(icon: 'arrow-circle-down', label: 'geoblacklight.home.data_type', facet_field: Settings.FIELDS.RESOURCE_TYPE, response: @response)) %&gt;\n      &lt;/div&gt;\n      &lt;div class='row'&gt;\n        &lt;%= render(Geoblacklight::HomepageFeatureFacetComponent.new(icon: 'globe', label: 'geoblacklight.home.placename', facet_field: Settings.FIELDS.SPATIAL_COVERAGE, response: @response)) %&gt;\n\n        &lt;%= render(Geoblacklight::HomepageFeatureFacetComponent.new(icon: 'tags', label: 'geoblacklight.home.subject', facet_field: Settings.FIELDS.SUBJECT, response: @response)) %&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"}]}